// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// allreduce module has the following three operations
//  - row reduction
//  - column reduction
//  - broadcasting
//
// It only uses a single routable color, three entrypoints and a single
// input/output queue. Any user's kernel can combine this module with other
// modules without running out of resources.
//
// 1. row reduction
//   The reduction is from left to right. The last PE (px=width-1) receives
//   all data from the neighbors one by one. The result is stored in the last
//   PE, other PEs do not change the content.
//
// 2. column reduction
//   The reduction is from north to south. The last PE (py=height-1) receives
//   all data from the neighbors one by one. The result is stored in the last
//   PE, other PEs do not change the content.
//
// 3. broadcast
//   The right-bottom PE (px=width-1, py=height-1) broadcasts the data upwards to
//   whole column, then each PE in this column broadcasts data to its west neighbors.
//

// The portal allreduce_nrm2() computes nrm2(x) by using allreduce(MAX)
// x must be a scalar (for simplicity)
// Here is the sequence of operations
// 1. allreduce(MAX, |x|)
//    xmax = max(|x|) overwrites |x|
// 2. SCALE_AND_SQUARE
//    alpha = approx(xmax)
//    |x| = |x|/alpha
//    |x| = |x| * |x|
// 3. allreduce(ADD, |x|)
//    |x| = sum{ (xj/alpha)^2 }
// 4. NRM2
//    |x| = alpha * sqrt(|x|)
//    All PEs perform NRM2 because of broadcasting, so we don't need to broadcast
//    the final result to all PEs.
//
// The state machine has 9 states
//   # (1) allreduce(MAX)
//   wvlts_per_pe = 1
//   functorop = MAX
//   state_seq[0] = STATE_ROW_REDUCE;
//   state_seq[1] = STATE_COL_REDUCE;
//   state_seq[2] = STATE_BCAST;
//   # (2) SCALE_AND_SQUARE
//   state_seq[3] = STATE_SCALE_AND_SQUARE; // next operation is ADD
//   # (3) allreduce(ADD)
//   state_seq[4] = STATE_ROW_REDUCE;
//   state_seq[5] = STATE_COL_REDUCE;
//   state_seq[6] = STATE_BCAST;
//   # (4) NRM2
//   state_seq[7] = STATE_NRM2;
//   # (5) END
//   state_seq[8] = STATE_DONE;
//


// How to assign explicit DSRs
//
// reduction:
//  last PE: f_send_data --> @fadds(mem_x_buf_dsd, mem_x_buf_dsd, fab_recv_wdsd, .{.async=true, .activate=f_send_data} );
//                 ^                          |
//                 |--------------------------+
//  others: f_send_data --> @mov32(fab_trans_x_wdsd, mem_x_buf_dsd, .{.async=true, .activate=f_send_ctrl} );
//          --> @mov32(fab_trans_ctrl_wdsd, mem_ctrl_buf_dsd, .{.async=true, .activate=f_send_data } );
//          --> f_send_data
//          1st PE: @mov32(fab_trans_ctrl_wdsd, mem_buf_td_dsd, .{.async=true} );
//
// bcast:
//  right-bottom PE: @mov32(fab_trans_x_wdsd, mem_x_buf_dsd, .{.async=true, .activate=f_send_ctrl} );
//                   --> @mov32(fab_trans_ctrl_wdsd, mem_buf_td_dsd, .{.async=true} );
//  others: @mov32(mem_x_buf_dsd, fab_recv_wdsd, .{.async=true} );
//
// Only one dest DSR, one src0 DSR and one src1 DSR are enough because
// - the teardown separates different operations
// - when TD arrives, sender has sent out the data/ctrl
//   the receiver has received all data because there is only one color
// - all DSD operations are serialized
//
// For example:
//   dest_dsr = @get_dsr(dsr_dest, 1);
//   src0_dsr = @get_dsr(dsr_src0, 1);
//   src1_dsr = @get_dsr(dsr_src1, 1);
//

// The sequence of LOCK of { row_reduce, col_reduce, bcast}
//
//  row_reduce blocks LOCK
//  T29 activates LOCK
//  row_reduce unblocks LOCK when it finishes
//
//  LOCK goes to next state
//
//  col_reduce blocks LOCK
//  T29 activates LOCK
//  col_reduce unblocks LOCK when it finishes
//
//  LOCK goes to next state
//
//  bcast blocks LOCK
//  T29 activates LOCK
//  bcast unblocks LOCK when it finishes
//
//  LOCK goes to next state (done)
//

param C_ROUTE: color;

param C_SEND_CTRL: local_task_id;  // send switch advance
param C_SEND_DATA: local_task_id;  // send data
param C_STATE_ENTRY: local_task_id; // state machine
// LOCK runs only if teardown is received and the operation is done
// LOCK performs the state transition
// teardown handler activates LOCK
// the operation blocks LOCK in the beginning and unblocks it when it finishes
param C_LOCK: local_task_id;

param first_px: bool; // (0 == px)
param last_px: bool;  // ((width-1) == px)
param first_py: bool; // (0 == py)
param last_py: bool;  // ((height-1) == py)

// row reduction needs to receive width-1 neighbors
// column reduction needs to receive height-1 neighbors
param width: i16;
param height: i16;

// f_callback = sys_mod.unblock_cmd_stream, to continue next command
param f_callback: fn ()void;

// last PE uses this ID as the input queue
// others use this ID as the output queue
param queues:[1]u16;

// explicit DSR allocation
param dest_dsr_ids: [1]u16;
param src0_dsr_ids: [1]u16;
param src1_dsr_ids: [1]u16;

const timestamp = @import_module("<time>");

const math_lib = @import_module("<math>");

// A new type for binary operators
// compiler assigns ADD=0 and MAX=1
const TYPE_BINARY_OP = enum(u16) { ADD, MAX };

// tsc_size_words = 3
var tscRefBuffer = @zeros([timestamp.tsc_size_words]u16);

////////////////////////////////////////////////////////////////////////////////
// Main memory (48KB)
////////////////////////////////////////////////////////////////////////////////

var x: [*]f32;

var functor: TYPE_BINARY_OP = TYPE_BINARY_OP.ADD;

const STATE_ROW_REDUCE: i16 = 0;
const STATE_COL_REDUCE: i16 = 1;
const STATE_BCAST: i16 = 2;
const STATE_SCALE_AND_SQUARE: i16 = 3;
const STATE_NRM2: i16 = 4;
const STATE_DONE: i16 = 5;

// allreduce(ADD/MAX) has four states
// allreduce_nrm2 has 9 states
// "+1" is to avoid out-of-bound if
// STATE_DONE also dereference next state
var state_seq = @zeros([9+1]i16);
var state_idx: i16 = 0;
var cur_state: i16 = 0;
var next_state: i16 = 0;

// record the reduction length from the caller
var wvlts_per_pe: u16 = 0;

// number of PEs involed in the reduction: last PE needs to count number of received neighbors
// WARNING: reduce_pes only records number of received PEs
//   row reduction: width-1
//   column reduction: height-1
// If reduce_pes is wrong, simfab shows re-entry error of UT when row reduction and col reduction
// are combined because row reduction has extra UT1 waiting for wavelets
var reduce_pes: i16 = 0;
// 1st PE during the reduction: send TD to others
//   row reduction: {px = 0}
//   column reduction: {py = 0}
var reduce_first_pe: bool;
// last PE during the reduction: receive data from w-1 or h-1 neighbors
//   row reduction: {px = w-1}
//   column reduction: {py = h-1}
var reduce_last_pe: bool;

// last PE uses count_recv_or_send to receive data from w-1 neighbors
// other PEs use count_recv_or_send to send data and control
var count_recv_or_send: i16 = 0;


const dest_dsr = @get_dsr(dsr_dest, dest_dsr_ids[0]);
const src0_dsr = @get_dsr(dsr_src0, src0_dsr_ids[0]);
const src1_dsr = @get_dsr(dsr_src1, src1_dsr_ids[0]);


// The portal function of allreduce(ADD/MAX)
//
// How to use:
//  reduce_mod = = @import_module( "<allreduce/pe>");
//  reduce_mod.allreduce(n, x);
//  The user has to prepare input vector x.
//
//  When allreduce() finishes, it will call user's callback.
//
// case 1: row reduction
//   state_seq = {STATE_ROW_REDUCE, STATE_DONE}
// case 2: column reduction
//   state_seq = {STATE_COL_REDUCE, STATE_DONE}
// case 3: row + column reduction
//   state_seq = {STATE_ROW_REDUCE, STATE_COL_REDUCE, STATE_DONE}
// case 4: broadcast
//   state_seq = {STATE_BCAST, STATE_DONE}
//
fn allreduce( n: i16, in_tensor: [*]f32, op: TYPE_BINARY_OP ) void {

   x = in_tensor;
   functor = op;

   @assert(n > 0);

   wvlts_per_pe = @bitcast(u16, n);

   // setup state sequence
   state_seq[0] = STATE_ROW_REDUCE;
   state_seq[1] = STATE_COL_REDUCE;
   state_seq[2] = STATE_BCAST;
   state_seq[3] = STATE_DONE;

   state_idx = 0;
   cur_state = state_seq[0];
   @activate(C_STATE_ENTRY);
}

// nrm2_x_copy keeps a copy of x during the nrm2 because
// the x is used by the allreduce
// After allreduce(MAX,x), all PEs have the same x = max(|xj|)
// nrm2_x_copy is used in scale_and_square:
//    alpha = approx(x[0])
//    x[0] <- (nrm2_x_copy / alpha)^2
// Then allreduce(ADD, x) updates x[0] = (|x|_2/alpha)^2
var nrm2_x_copy: f32;


// The portal function rnm2
//
// It only computes nrm2(x[0]) because
// - common case is n = 1
// - no SIMD on sqrt
//
fn allreduce_nrm2(in_tensor: [*]f32) void {

    x = in_tensor;
    functor = TYPE_BINARY_OP.MAX;
    wvlts_per_pe = 1; // nrm2 of x[0]

    // x <-- |xj|
    var xreg = x[0];
    xreg = math_lib.abs(xreg);
    x[0] = xreg;
    // nrm2_x_copy can keep either xj or |xj|
    nrm2_x_copy = xreg;

    // setup state sequence
    // (1) allreduce(MAX)
    state_seq[0] = STATE_ROW_REDUCE;
    state_seq[1] = STATE_COL_REDUCE;
    state_seq[2] = STATE_BCAST;
    // x[0] = max(|xj|)
    // (2) SCALE_AND_SQUARE
    // x[0] = (|xj|/alpha)^2
    state_seq[3] = STATE_SCALE_AND_SQUARE; // next operation is ADD
    // (3) allreduce(ADD)
    state_seq[4] = STATE_ROW_REDUCE;
    state_seq[5] = STATE_COL_REDUCE;
    state_seq[6] = STATE_BCAST;
    // x[0] = sum{(|xj|/alpha)^2}
    // (4) NRM2
    // x[0] = |x|_2
    state_seq[7] = STATE_NRM2;
    // (5) END
    state_seq[8] = STATE_DONE;

    state_idx = 0;
    cur_state = state_seq[0];
    @activate(C_STATE_ENTRY);
}

//--------------------- system utility for teardown

// ref: old monolith/src/ucode/kernels/lib/pe_address_map.casm
// const TAMAP_FAB_MAP_START_ADDR       = 0x7f20
// ref: monolith/src/ucode/kernels/lib/pe_addr_map_ein.casm
// const TAMAP_FAB_TRAFFIC_MAP_START_ADDR = 0x7f20
const TAMAP_FAB_MAP_START_ADDR : u16 = 0x7f20;
const D2H_COLOR_CONFIG_ADDR : u16 = TAMAP_FAB_MAP_START_ADDR + @get_int(C_ROUTE);

// mask out bit 0:9, including input/output pos0
// keep bit 10:15, including
//  bit 15: point to point
//  bit 14: TIP
//  bit 12-13: control wavelet pop mode
//  bit 11: color swap for E,W inputs
//  bit 10: color swap for N,S inputs
//
// The teardown clears bit 14 (TIP)
// bit 12-13 is comptime decided, only last PE uses pop_always, others pop_on_advance
const MASK_INPUT_OUTPUT_POS0: u16 = 0xfc00;

// bits 0:4 define the initial output switch position
const OUTPUT_WEST: u16  = 0x1;  // bit 0: west output mask
const OUTPUT_EAST: u16  = 0x2;  // bit 1: east output mask
const OUTPUT_SOUTH: u16 = 0x4;  // bit 2: south output mask
const OUTPUT_NORTH: u16 = 0x8;  // bit 3: north output mask
const OUTPUT_RAMP: u16  = 0x10; // bit 4: offramp output mask

// bits 5:9 define the initial input switch position
const INPUT_WEST: u16  = 0x20;  // bit 5: west input mask
const INPUT_EAST: u16  = 0x40;  // bit 6: east input mask
const INPUT_SOUTH: u16 = 0x80;  // bit 7: south input mask
const INPUT_NORTH: u16 = 0x100; // bit 8: north input mask
const INPUT_RAMP: u16  = 0x200; // bit 9: onramp input mask

// Fabric switch configuration
// 0x7f40 - 0x7f57 - colors 0-23. Each address is for a single color
// Bits 14:13 Current Switch position (writes both input and output switch position; reads input position)
// Bits 12 Ring mode (1) (Switch movements Stop on last valid setting if ring mode is 0.)
// Bit 11 Switch position 3 switch select (1=input; 0 = output)
// Bits 10:8 Switch position 3 (5 = INVALID; 4 = CE; 3 = N; 2 = S; 1 = E; 0 = W)
// Bit 7 Switch position 2 switch select (1=input; 0 = output)
// Bits 6:4 Switch position 2 (5 = INVALID; 4 = CE; 3 = N; 2 = S; 1 = E; 0 = W)
// Bit 3 Switch position 1 switch select (1=input; 0 = output)
// Bits 2:0 Switch position 1 (5 = INVALID; 4 = CE; 3 = N; 2 = S; 1 = E; 0 = W)
//
// ref: monolith/src/ucode/kernels/lib/pe_addr_map_fyn.casm
// .const TAMAP_FAB_SWITCH_CFG_START_ADDR = 0x7f40
const TAMAP_FAB_SWITCH_CFG_START_ADDR: u16 = 0x7f40;
const D2H_SWITCH_CONFIG_ADDR: u16 = TAMAP_FAB_SWITCH_CFG_START_ADDR + @get_int(C_ROUTE);
// mask bits 14:13
// masking with MASK_SWITCH_RESET_POS0 is equivalent to set bits14:13 to zero (i.e. back to pos0)
const MASK_SWITCH_RESET_POS0: u16 = 0x9fff;

// To clear setting of pos1, set bits 2:0 to zero, but keep others unchanged
const MASK_SWITCH_CLEAR_POS1: u16 = 0xfff8;
// Bit 3 is always 1 because "pos1 = {.rx = RAMP}" implies position 1 switch select is "1=input"
const SWITCH_POS1_INVALID: u16 = 0x5;
const SWITCH_POS1_RAMP: u16 = 0x4;

fn translate_word_to_bytes( addr: u16 ) u16 {
    var addr_bytes = addr * 2 ;
    return addr_bytes;
}


////////////////////////////////////////////////////////////////////////////////
// DSDs
// data-structure descriptors (DSDs), loaded into data-structure registers (DSRs)
//
// Queues 0,1: input depth 6 wavelets
// Queues 2,3: input depth 4 wavelets
// Queues 4-7: input depth 2 wavelets
//
// queues 0,1: output depth 2 wavelets
// queues 2,3: output depth 6 wavelets
// queues 4,5: output depth 2 wavelets
//
// Length of an operand:
// The length of all other types of DSRs is specified by the length field of its DSD. When
// the bits encoding the length are 0x7fff, the length is infinite.
//
// Length of the vector instruction is then determined in the following order:
// 1. If src0 has a non-zero length, that length is used
// 2. If src1 has a non-zero length, that length is used
// 3. If dst has a non-zero length, that length is used
// 4. if no operands have length (all operands are GPR), length = 1
////////////////////////////////////////////////////////////////////////////////

const dummy = @zeros([1]i16);

// rowReduce() binds mem_x_buf_dsd to pointer x and resets its length to n (given by the caller)
// Last PE adds data from neighbors to mem_x_buf_dsd
// Other PEs send mem_x_buf_dsd to the east
var mem_x_buf_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> dummy[i] });

// other PE (not last PE) uses this DSD to send x
var fab_trans_x_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = C_ROUTE,
    .output_queue = @get_output_queue(queues[0])
});

// WARNING: control wavelet must be sent with the same microthread, via the same output buffer,
// otherwise, we may see only one data wavelet, then 2nd is the control wavelet, then
// the remaining data cannot be sent out because the routing is back to {.rx=WEST, .tx=EAST},
// there is no path from RAMP to the router.
const fab_trans_ctrl_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .control = true,
    .fabric_color = C_ROUTE,
    .output_queue = @get_output_queue(queues[0]),
});


// row reduction: the last PE receives the data from its w-1 neighbors,
// the receiving sequence is p0, p1, ..., p{w-1}.
// It uses the same queue ID because it does not send, only receives.
// It does not receive ctrl wavelets because of NOCE.
// f_send_data() receives data (w-1) times
//
var fab_recv_wdsd =  @get_dsd(fabin_dsd, .{
   .extent = 1,
   .fabric_color = C_ROUTE,
   .input_queue = @get_input_queue(queues[0])
});


////////////////////////////////////////////////////////////////////////////////
// Tasks
// syntax
//     task_begin(name, entrypoint, color)
////////////////////////////////////////////////////////////////////////////////


const switches = @import_module("<memcpy/memcpy_switches>");

// The following arrays define values for control wavelets, which update the
// switch position at the recipient PEs.
// All are comptime constants
//
// ctrl_11 is for other PEs which changes switch of two consecutive PEs
var ctrl_11 = [1]u32 { switches.ctrl(switches.switch_cmd_11()) };

var mem_ctrl_buf_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> ctrl_11[i] });

// teardown from casm
// teardown_buf[0] = (1 << 31) | (0b111 << 22)
//
// teardown from csl
// from cslang/test-e2e/dynamic_filters/sender.csl
//  31=0x1f = no entrypoint
//
// teardown wavelet = 0x1df 0000
//const teardown_buf = [1]u32{(31 << 16) | 0b111 << 22};
// teardown wavelet = 0x9df 9249
const teardown_buf = [1]u32 { switches.ctrl(switches.teardown_cmd_1()) };

const mem_buf_td_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> teardown_buf[i] });

// the color C_ROUTE is in teardown mode at comptime by specifying {.teardown = true}
// reduce() and broadcast_to_all() block LOCK in the beginning and unblock it
// when the operation finishes
//
// WARNING: we don't block LOCK in the xxx_configure() because it is sequential, and
// it is more intuitive to unblock LOCK in reduce() and broadcast_to_all()
//
task f_state_entry() void {

    if (STATE_ROW_REDUCE == cur_state){
        // rowReduce_configure() reconfigures the pos0, pos1 and clears TIP
        rowReduce_configure();
        // perform row reduction and store the result to last PE
        // 1st PE will send TD to turn C_ROUTE back to teardown mode
        reduce_pes = width-1;
        reduce_first_pe = first_px;
        reduce_last_pe = last_px;
        reduce( wvlts_per_pe );

        // prefetch next state which will be copied into cur_state in teardown handler
        state_idx += 1;
        next_state = state_seq[state_idx];

    }else if (STATE_COL_REDUCE == cur_state){
        // colReduce_configure() reconfigures the pos0, pos1 and clears TIP
        colReduce_configure();
        // perform column reduction and store the result to last PE
        // 1st PE will send TD to turn C_ROUTE back to teardown mode
        reduce_pes = height-1;
        reduce_first_pe = first_py;
        reduce_last_pe = last_py;
        reduce( wvlts_per_pe );

        // prefetch next state which will be copied into cur_state in teardown handler
        state_idx += 1;
        next_state = state_seq[state_idx];

    }else if (STATE_BCAST == cur_state){
        // bcast_configure() reconfigures pos0 and disables pos1
        bcast_configure();
        // right-bottom PE broadcasts the data to others and also sends TD
        broadcast_to_all( wvlts_per_pe );

        // prefetch next state which will be copied into cur_state in teardown handler
        state_idx += 1;
        next_state = state_seq[state_idx];

    }else if (STATE_SCALE_AND_SQUARE == cur_state){
        // Assume allreduce(MAX) is done
        // x[0] = xmax = max({|xj|})

        // Update x[0] by (xmax/alpha)^2
        scale_and_square();
        // next reduction is allreduce(ADD)
        functor = TYPE_BINARY_OP.ADD;

        // prefetch next state which will be copied into cur_state in teardown handler
        // sequential code: f_lock is not triggered to assign (cur_state = next_state)
        // update cur_state directly
        state_idx += 1;
        cur_state = state_seq[state_idx];

        @activate(C_STATE_ENTRY);

    }else if (STATE_NRM2 == cur_state){
        // Assume allreduce(ADD) is done
        // x[0] = sum({(|xj|/alpha)^2})
        // Update x[0] by |x|_2
        nrm2_postprocessing();

        // prefetch next state which will be copied into cur_state in teardown handler
        // sequential code: f_lock is not triggered to assign (cur_state = next_state)
        // update cur_state directly
        state_idx += 1;
        cur_state = state_seq[state_idx];

        @activate(C_STATE_ENTRY);

    }else if (STATE_DONE == cur_state){
        // state machine is done, return control back to the caller
        timestamp.get_timestamp(&tscRefBuffer);

        f_callback();
    }else{
        @assert(false); // Error: unknown state
        // assert() is ignored by HW, it could hang here
        // To avoid a stall, trigger callback (the caveat is the wrong result)
        f_callback();
    }
}

fn reduce( n: u16 ) void {

    // WARNING: block LOCK in the beginning and only
    // unblock LOCK when "reduce" finishes
    @block(C_LOCK);

    count_recv_or_send = 0;

    // changes switch of of itself and its neighbor
    // The last PE does not call f_send_ctrl(), so this op is DON'T care
    mem_ctrl_buf_dsd =  @set_dsd_base_addr(mem_ctrl_buf_dsd, ctrl_11);

    mem_x_buf_dsd = @set_dsd_base_addr(mem_x_buf_dsd, x);
    mem_x_buf_dsd = @set_dsd_length(mem_x_buf_dsd, n);

    fab_recv_wdsd = @set_dsd_length(fab_recv_wdsd, n);
    fab_trans_x_wdsd = @set_dsd_length(fab_trans_x_wdsd, n);

    // last PE receives data from w-1 neighbors
    // other PEs send data and control to the east/south
    @activate(C_SEND_DATA);  // triggers f_send_data
}

fn broadcast_to_all( n: u16 ) void {

    // WARNING: block LOCK in the beginning and only
    // unblock LOCK when "broadcast" finishes
    @block(C_LOCK);

    // No PE sends switch advance
    // mem_ctrl_buf_dsd =  @set_dsd_base_addr(mem_ctrl_buf_dsd, ctrl_11);

    mem_x_buf_dsd = @set_dsd_base_addr(mem_x_buf_dsd, x);
    mem_x_buf_dsd = @set_dsd_length(mem_x_buf_dsd, n);
    fab_recv_wdsd = @set_dsd_length(fab_recv_wdsd, n);
    fab_trans_x_wdsd = @set_dsd_length(fab_trans_x_wdsd, n);

    if ( last_px and last_py ){
        // Pw-1,h-1 sends data and then f_send_ctrl sends a TD
        // f_send_ctrl() will unblock LOCK
        //@mov32(fab_trans_x_wdsd, mem_x_buf_dsd, .{.async=true, .activate=f_send_ctrl} );
        @load_to_dsr(dest_dsr, fab_trans_x_wdsd, .{.async=true, .activate=f_send_ctrl} );
        @load_to_dsr(src1_dsr, mem_x_buf_dsd);
        @mov32(dest_dsr, src1_dsr, .{.async=true} );
    }else{
        // other PEs receive data and wait for TD
        // unblock LOCK after data is received, T29 will activate LOCK
        //@mov32(mem_x_buf_dsd, fab_recv_wdsd, .{.async=true, .unblock=C_LOCK} );
        @load_to_dsr(dest_dsr, mem_x_buf_dsd);
        @load_to_dsr(src1_dsr, fab_recv_wdsd, .{.async=true, .unblock=C_LOCK} );
        @mov32(dest_dsr, src1_dsr, .{.async=true} );
    }
}


var alpha: f32;
var inv_alpha: f32;


// Assume the caller finishes allreduce(MAX,|x|) so x[0] = max({|xj|})
// Update x[0] by (x[0]/alpha)^2
// where
//     alpha = 2^(E-127) approximates x[0]
//
fn scale_and_square() void {
    var xreg: f32 = x[0];
    // (1) compute alpha
    approx(xreg, &alpha, &inv_alpha);
    // (2) scale x by x/alpha
    xreg = nrm2_x_copy;
    xreg = xreg * inv_alpha;
    // (3) square x
    // xreg is O(1), SQUARE does not overflow
    x[0] = xreg * xreg;
}

// Assume the caller has computed
//   x[0] = allreduce(ADD, (xj/alpha)^2)
//
// Update x[0] by |x|_2
//
fn nrm2_postprocessing() void{
    // x[0] = sum({(xj/alpha)^2}) = |x|^2 / alpha^2
    var xreg: f32 = x[0];
    xreg = math_lib.sqrt(xreg);
    x[0] = xreg * alpha;
}

// last PE does not send data, it only receives data
// row-reduce sequence: f_send_data() --> f_send_ctrl()
//                      ^                  |
//                      |------------------+
//
// f_send_data() is the last call when the reduction finishes
// unblock LOCK here when the operation is done
task f_send_data() void {
    if (reduce_last_pe){
        // last PE receives data from reduce_pes neighbors
        if (count_recv_or_send < reduce_pes){
            //@fadds(mem_x_buf_dsd, mem_x_buf_dsd, fab_recv_wdsd, .{.async=true, .activate=f_send_data} );
            @load_to_dsr(src1_dsr, fab_recv_wdsd, .{.async=true, .activate=f_send_data} );
            @load_to_dsr(src0_dsr, mem_x_buf_dsd);
            @load_to_dsr(dest_dsr, mem_x_buf_dsd);
            if (TYPE_BINARY_OP.ADD == functor){
                @fadds(dest_dsr, src0_dsr, src1_dsr, .{.async=true} );
            }else{
                @fmaxs(dest_dsr, src0_dsr, src1_dsr, .{.async=true} );
            }
            count_recv_or_send += 1;
        }else{
            // last PE has received all data from the reduce_pes neighbors
            // wait for TD from 1st PE
            // unblock LOCK, T29 will activate LOCK
            @unblock(C_LOCK);
        }
    }else{
        // other PE (not last PE) sends data and control
        if (count_recv_or_send < 1){
            //@mov32(fab_trans_x_wdsd, mem_x_buf_dsd, .{.async=true, .activate=f_send_ctrl} );
            @load_to_dsr(dest_dsr, fab_trans_x_wdsd, .{.async=true, .activate=f_send_ctrl} );
            @load_to_dsr(src1_dsr, mem_x_buf_dsd);
            @mov32(dest_dsr, src1_dsr, .{.async=true} );
            count_recv_or_send += 1; 
        }else{
            // sending is done (including data wavelets and control wavelets)
            @unblock(C_LOCK);
            // only 1st PE sends TD to other PEs
            // T29 will activate LOCK
            if (reduce_first_pe){
                //@mov32(fab_trans_ctrl_wdsd, mem_buf_td_dsd, .{.async=true} );
                @load_to_dsr(dest_dsr, fab_trans_ctrl_wdsd, .{.async=true} );
                @load_to_dsr(src1_dsr, mem_buf_td_dsd);
                @mov32(dest_dsr, src1_dsr, .{.async=true} );
            }
        }
    }
}


task f_send_ctrl() void{
    if (STATE_BCAST == cur_state){
        //broadcast: Pw-1,h-1 only sends the TD
        // unblock LOCK after TD is sent out
        //@mov32(fab_trans_ctrl_wdsd, mem_buf_td_dsd, .{.async=true, .unblock=C_LOCK} );
        @load_to_dsr(dest_dsr, fab_trans_ctrl_wdsd, .{.async=true, .unblock=C_LOCK} );
        @load_to_dsr(src1_dsr, mem_buf_td_dsd);
        @mov32(dest_dsr, src1_dsr, .{.async=true} );
    }else{
        // reduction: other PEs (not last PE) sends switch advance
        //   last PE does not trigger f_send_ctrl because it only receives data
        // f_send_data() will unblock LOCK
        //@mov32(fab_trans_ctrl_wdsd, mem_ctrl_buf_dsd, .{.async=true, .activate=f_send_data } );
        @load_to_dsr(dest_dsr, fab_trans_ctrl_wdsd, .{.async=true, .activate=f_send_data } );
        @load_to_dsr(src1_dsr, mem_ctrl_buf_dsd);
        @mov32(dest_dsr, src1_dsr, .{.async=true} );
    }
}


// LOCK runs only if TD is received and the operation (*) finishes
//
// Here is the sequence
// - the operation blocks LOCK in the beginning
// - teardown handler activates LOCK
// - the operation unblocks LOCK when it finishes
// - LOCK is picked by the HW scheduler to perform the state transition
//
// (*) operation is {row_reduce, col_reduce, bcast}
//
task f_lock() void {
    cur_state = next_state; // go to next state
    @activate(C_STATE_ENTRY);
}


// (alpha, inv_alpha) = approx(x) approximates x by positive alpha such that
//     x = alpha * (x/alpha)
// where alpha = 2^(exp) and (x/alpha) has no precision loss.
//
// If x is a normal number, |x| = 2^(exp) * r, then alpha = 2^(exp)
//
// The purpose of this approximation is for nrm2(x).
// nrm2(x) can hit overflow if we just do square-sum.
// The simple workaround is to square-sum of x/max(x).
// However the division is very expensive, about 50 cycles.
// We just need a number alpha close to max(x) such that x/alpha = O(1).
// The cost of approx is about 11 instructions, much cheaper than div.
//
// Assume x = sign * 2^(E-127) * mantissa, "approx" handles the following
// four cases:
//
// case 1: x is a normal number
//    0 < E < 255
//    x is normal
//    x = sign * 2^(E-127) * 1.b22b21... b1b0
//    min(x) = 0x0080 0000
//           = 2^(-126) = 1.1754943508 x 10^(-38)
//    max(x) = 0x7f7f ffff
//           = 2^127 x (2 - 2^(-23)) = 3.4028234664 * 10^38
//
// case 2: x is a subnormal number
//    E = 0 and mantissa > 0
//    x = sign * 2^(-127) * b22.b21... b1b0
//      = sign * 2^(-126) * 0.b22b21... b1b0
//    min(x) = 0x000 0001
//           = 2^(-126) x 2^(-23) = 2^(-149) = 1.4*10^(-45)
//    max(x) = 007f ffff
//           = 2^(-126) x (1 - 2^(-23)) = 1.17 x 10^(-38)
//
// case 3: x = 0
//    E = 0 and mantissa = 0
//
// case 4: x = inf or nan
//    inf: E = 255 and mantissa = 0
//    nan: E = 255 and mantissa > 0
//
// Example 1: x = 14.0
//    alpha_u32 = 0x41000000
//    inv_alpha_u32 = 0x3e000000
//    alpha = 8.
//    inv_alpha = 0.125
// Example 2: x = 0.15625
//    alpha_u32 = 0x3e000000
//    inv_alpha_u32 = 0x41000000
//    alpha = 0.125
//    inv_alpha = 8.0
// Example 3: x = 1.e-43
//    alpha_u32 = 0x800000
//    inv_alpha_u32 = 0x7e800000
//    alpha = 1.1754943508222875e-38
//    inv_alpha = 8.507059173023462e+37
// Example 4: x = 1.0/0.0 (np.float32(np.inf))
//    alpha_u32 = 0x3f800000
//    inv_alpha_u32 = 0x3f800000
//    alpha = 1.0
//    inv_alpha = 1.0
// Example 5: x = 0.0/0.0 (np.float32(np.nan))
//    alpha_u32 = 0x3f800000
//    inv_alpha_u32 = 0x3f800000
//    alpha = 1.0
//    inv_alpha = 1.0
//
fn approx(x: f32, alpha: *f32, inv_alpha: *f32) void {
   const MASK_EXPONENT: u32 = 0x7F800000;
   const MASK_MANTISSA: u32 = 0x007FFFFF;
   const x_u32: u32 = @bitcast(u32, x);
   // x is presented by (sign | E | mantissa)
   // sign has 1 bit, E has 8 bits and mantissa has 23 bits
   // E = (x & MASK_EXPONEN) >> 23
   const exp: u32 = (x_u32 & MASK_EXPONENT);
   // mantissa = b22b21...b1b0 has 23-bit, need u32
   const mantissa: u32 = (x_u32) & MASK_MANTISSA;
   // E has 8-bit, use u16
   var E: u16 = @as(u16, (exp >> 23));

   // case 1: 0 < E < 255, x is normal
   // the following if-clause handles case 2, 3 and 4
   if (0 == E){
        if (0 == mantissa){
            // case 3: x = 0
            // reset alpha = 1
            E = 127;
        }else{
            // case 2: x is subnormal
            // reset alpha= 2^(-126)
            E = 1;
        }
    }
    if (255 == E){
        // case 4: x = inf or NAN
        // reset alpha = 1
        E = 127;
    }
    // alpha and inv_alpha are u32
    // alpha = 2^(E - 127)
    // inv_alpha = 1/alpha = 2^(127 - E)
    var alpha_u32: u32 = (@as(u32, E) << 23);
    var inv_alpha_u32: u32 = @as(u32, (254 - E)) << 23;

    alpha.* = @bitcast(f32, alpha_u32);
    inv_alpha.* = @bitcast(f32, inv_alpha_u32);
}


comptime {
    // last PE uses a microthread to receive data
    @block(C_ROUTE);
    @bind_local_task( f_send_ctrl, C_SEND_CTRL);
    @bind_local_task( f_send_data, C_SEND_DATA);
    @bind_local_task( f_state_entry, C_STATE_ENTRY);
    @bind_local_task( f_lock, C_LOCK);
}


//----------------- the following is the routing of C_ROUTE

const tile_config = @import_module("<tile_config>");

fn rowReduce_configure() void {

    // (1) setup switch according to config parameters
    // 1. pos0 (color config reg)
    // 2. pos1 (switch config reg)
    //    pos1 = {.rx = RAMP} for all PEs except last PE

    // reset switch position to pos0
    // WARNING: if switch config register does not reset the switch position back to pos0,
    // it is possible that some PE is at pos1 after the switch is reconfigured and the sending
    // pattern is messed up, for example, the PE sends data first, then forwards the data from
    // the west.
    var r_switch_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* ;
    // mask bits 14:13 to reset input&output position to pos0
    r_switch_state = r_switch_state & MASK_SWITCH_RESET_POS0;
    // WARNING: all PEs are configured by
    //   - ".pos1 = .{ .rx = RAMP }"  --> bit 3 is 1
    //   - ".ring_mode = true"  --> bit 12 is 1
    //   - ".pop_mode = .{ .pop_on_advance = true }" --> bits 13:12 of fabric per-color config
    // mask bits 2:0 to clear setting of pos1
    r_switch_state = r_switch_state & MASK_SWITCH_CLEAR_POS1;
    if (last_px){
        // last PE does not have pos1
        r_switch_state = r_switch_state | SWITCH_POS1_INVALID;
    }else{
        // others have ".pos1 = .{ .rx = RAMP }"
        r_switch_state = r_switch_state | SWITCH_POS1_RAMP;
    }
    @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* = r_switch_state;

    var r_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* ;
    // clear input/output switch pos0
    r_state = r_state & MASK_INPUT_OUTPUT_POS0 ;

    if (first_px){
        // 1st PE must has {rx = RAMP} to send out the data
        // .rx = .{ RAMP },.tx = .{ EAST },
        r_state = r_state | INPUT_RAMP | OUTPUT_EAST;
    }else if (last_px){
        // last PE only receives data
        // .rx = .{ WEST }, .tx = .{ RAMP },
        r_state = r_state | INPUT_WEST | OUTPUT_RAMP;
    }else{ 
        // 0 < px < width-1
        // .rx = .{ WEST }, .tx = .{ EAST },
        r_state = r_state | INPUT_WEST | OUTPUT_EAST;
    }
    // update the switch pos0
    @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* = r_state;

    // (2) clear teardown-in-progress bit
    // config_reg[c] ^= mask where mask = 1 << 14
    tile_config.teardown.exit(C_ROUTE);
}


fn colReduce_configure() void {

    // (1) setup switch according to config parameters
    // 1. pos0 (color config reg)
    // 2. pos1 (switch config reg)
    //    pos1 = {.rx = RAMP} for all PEs except last PE

    // reset switch position to pos0
    // WARNING: if switch config register does not reset the switch position back to pos0,
    // it is possible that some PE is at pos1 after the switch is reconfigured and the sending
    // pattern is messed up, for example, the PE sends data first, then forwards the data from
    // the west.
    var r_switch_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* ;
    // mask bits 14:13 to reset input&output position to pos0
    r_switch_state = r_switch_state & MASK_SWITCH_RESET_POS0;
    // WARNING: all PEs are configured by
    //   - ".pos1 = .{ .rx = RAMP }"  --> bit 3 is 1
    //   - ".ring_mode = true"  --> bit 12 is 1
    //   - ".pop_mode = .{ .pop_on_advance = true }" --> bits 13:12 of fabric per-color config
    // mask bits 2:0 to clear setting of pos1
    r_switch_state = r_switch_state & MASK_SWITCH_CLEAR_POS1;
    if (last_py){
        // last PE does not have pos1
        r_switch_state = r_switch_state | SWITCH_POS1_INVALID;
    }else{
        // others have ".pos1 = .{ .rx = RAMP }"
        r_switch_state = r_switch_state | SWITCH_POS1_RAMP;
    }
    @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* = r_switch_state;

    var r_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* ;
    // clear input/output switch pos0
    r_state = r_state & MASK_INPUT_OUTPUT_POS0 ;

    if (first_py){
        // 1st PE must has {rx = RAMP} to send out the data
        // .rx = .{ RAMP },.tx = .{ SOUTH },
        r_state = r_state | INPUT_RAMP | OUTPUT_SOUTH;
    }else if (last_py){
        // last PE only receives data
        // .rx = .{ NORTH }, .tx = .{ RAMP },
        r_state = r_state | INPUT_NORTH | OUTPUT_RAMP;
    }else{
        // 0 < py < width-1
        // .rx = .{ NORTH }, .tx = .{ SOUTH },
        r_state = r_state | INPUT_NORTH | OUTPUT_SOUTH;
    }
    // update the switch pos0
    @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* = r_state;

    // (2) clear teardown-in-progress bit
    // config_reg[c] ^= mask where mask = 1 << 14
    tile_config.teardown.exit(C_ROUTE);
}


// w > 1 and h > 1
//  x <-- x <-- x
//              ^
//              |
//  x <-- x <-- x
//              ^
//              |
//  x <-- x <-- x
//
fn bcast_configure() void {

    // (1) setup switch according to config parameters
    // 1. pos0 (color config reg)
    // 2. pos1 (switch config reg)
    //    pos1 = {invalid} for all PEs

    // reset switch position to pos0
    // WARNING: if switch config register does not reset the switch position back to pos0,
    // it is possible that some PE is at pos1 after the switch is reconfigured and the sending
    // pattern is messed up, for example, the PE sends data first, then forwards the data from
    // the west.
    var r_switch_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* ;
    // mask bits 14:13 to reset input&output position to pos0
    r_switch_state = r_switch_state & MASK_SWITCH_RESET_POS0;
    // WARNING: all PEs have pos0 only, so disable pos1
    //   no change for ring_mode and pop_mode
    //   - ".ring_mode = true"  --> bit 12 is 1
    //   - ".pop_mode = .{ .pop_on_advance = true }" --> bits 13:12 of fabric per-color config
    // mask bits 2:0 to clear setting of pos1
    r_switch_state = r_switch_state & MASK_SWITCH_CLEAR_POS1;
    r_switch_state = r_switch_state | SWITCH_POS1_INVALID;
    @bitcast(*u16, translate_word_to_bytes(D2H_SWITCH_CONFIG_ADDR) ).* = r_switch_state;

    var r_state : u16 = @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* ;
    // clear input/output switch pos0
    r_state = r_state & MASK_INPUT_OUTPUT_POS0 ;

    if (last_px){
        // px = w-1
        if (last_py){
            // Pw-1,h-1: send to west and north, { .rx = .{RAMP}, .tx = .{WEST, NOTH} } }
            r_state = r_state | INPUT_RAMP | OUTPUT_WEST | OUTPUT_NORTH;
        }else{
            if (first_py){
                // Pw-1,0: { .rx = .{SOUTH}, .tx = .{WEST, RAMP} }
                r_state = r_state | INPUT_SOUTH | OUTPUT_WEST | OUTPUT_RAMP;
            }else{
                // Pw-1,py: 0 < py < h-1, { .rx = .{SOUTH}, .tx = .{WEST, RAMP, NORTH} }
                r_state = r_state | INPUT_SOUTH | OUTPUT_WEST | OUTPUT_RAMP | OUTPUT_NORTH;
            }
        }
    }else{
        if (first_px){
            // px = 0, {.rx = .{EAST}, .tx = .{RAMP}}
            r_state = r_state | INPUT_EAST | OUTPUT_RAMP;
        }else{
            // 0 < px < w-1, { .rx = .{EAST}, .tx = .{WEST, RAMP} }
            r_state = r_state | INPUT_EAST | OUTPUT_RAMP | OUTPUT_WEST;
        }
    }

    // update the switch pos0
    @bitcast(*u16, translate_word_to_bytes(D2H_COLOR_CONFIG_ADDR) ).* = r_state;

    // (2) clear teardown-in-progress bit
    // config_reg[c] ^= mask where mask = 1 << 14
    tile_config.teardown.exit(C_ROUTE);
}

// state 1: row-reduce
// state 2: col-reduce
// state 3: bcast
//
fn teardown_allreduce() void {
    // turn C_ROUTE back to teardown mode
    // LOCK can be picked only when the operation finishes
    @activate(C_LOCK);
}

comptime {
    @set_teardown_handler(teardown_allreduce, C_ROUTE);
}

//
// routing of C_ROUTE (send data to west, from leftmost)
//    -->   --->-->   -->-->
//    ^
//    |
//   sw_adv
//    -->      -->   -->-->
//    ^        ^
//    |        |
//   data     data
//            sw_adv
//    -->     --> -->     -->
//    ^                   ^
//    |                   |
//   sw_adv              data
//                      sw_adv
//    -->       -->    --> -->
//    ^         ^
//    |         |
//             data
//             sw_adv
//
comptime {

    // The switch must work for different operations, including
    //   - row reduction
    //   - column reduction
    //   - broadcasting
    // The initial setting must be universal so we can reconfigure the
    // switch for these three operations at runtime
    //
    // We need to set invariant parameters at comptime (runtime does not alter):
    // 1. teardown mode at comptime
    //   {.teardown = true} implies color is in teardown mode at comptime
    // 2. ring mode
    //   ".ring_mode = true"  --> fabric switch config reg sets bit 12 as 1
    // 3. pop on advance
    //   ".pop_mode = .{ .pop_on_advance = true }" --> fabric per-color config reg sets bits 13:12
    // 4. position 1
    //   ".pos1 = .{ .rx = RAMP }"  --> fabric switch config reg sets bit 3 as 1
    //
    // The following (last) PEs do not have position 1:
    //   - "px = width" for row reduction
    //   - "py = height" for column reduction
    //   - all for broadcasting
    // The runtime resets position 1 (bits 2:0 of fabric switch config) to either
    //   SWITCH_POS1_INVALID to disable position 1 or
    //   SWITCH_POS1_RAMP to reset position 1 back to ".pos1 = .{ .rx = RAMP }"
    // The bit 3 of fabric switch config is always 1 (position 1 switch select is "1=input")
    // If position 1 is disabled, bit 3 is don't care
    // If position 1 is disabled, pop mode is also don't care because of NOCE
    // If position 1 is disabled, ring mode is also don't care
    //
    // Remark: we don't use ".pop_mode = .{ .always_pop = true }" because there is no need
    // to propagate the TD to mux. All PEs have a teardown handler to deal with this TD, so
    // we do not need to pop out an instruction in TD wavelet, for example
    //     0x9df 9249 --> 0x91f 9249
    // (The instruction is NOT teardown 0b111, but 0b100 (NOCE, NOP))
    // (teardown = 0x9df,9249  (cmd1=teardown+NOCE, others=NOP+NOCE))
    //
    // The original setting of row reduction
    // 1st PE: px = 0
    //   .pos0 = .{ .rx = .{ RAMP }, .tx = .{ EAST }}
    //   .pop_mode = .{ .pop_on_advance = true }
    //   .pos1 = .{ .rx = RAMP }
    //   .ring_mode = true
    //   .teardown = true
    // middle: 1st PE < px < last PE
    //   .pos0 = .{ .rx = .{ WEST }, .tx = .{ EAST }}
    //   .pop_mode = .{ .pop_on_advance = true }
    //   .pos1 = .{ .rx = RAMP }
    //   .ring_mode = true
    //   .teardown = true
    // last PE: px = w-1
    //   .pos0 = .{ .rx = .{ WEST }, .tx = .{ RAMP }}
    //   .teardown = true
    //
    // The original setting of column reduction
    // 1st PE: py = 0
    //   .pos0 = .{ .rx = .{ RAMP }, .tx = .{ SOUTH }}
    //   .pop_mode = .{ .pop_on_advance = true }
    //   .pos1 = .{ .rx = RAMP }
    //   .ring_mode = true
    //   .teardown = true
    // middle: 1st PE < py < last PE
    //   .pos0 = .{ .rx = .{ NORTH }, .tx = .{ SOUTH }}
    //   .pop_mode = .{ .pop_on_advance = true }
    //   .pos1 = .{ .rx = RAMP }
    //   .ring_mode = true
    //   .teardown = true
    // last PE: py = h-1
    //   .pos0 = .{ .rx = .{ NORTH }, .tx = .{ RAMP }}
    //   .teardown = true
    //
    const universalConfig = .{
        .routes= .{
            .rx = .{ WEST },
            .tx = .{ EAST },
            //.pop_mode = .{ .always_pop = true },
            .pop_mode = .{ .pop_on_advance = true },
        },
        .switches=.{
            .pos1 = .{ .rx = RAMP },
            .ring_mode = true,
        },
        .teardown = true
    };

    if (1 == width){
        @comptime_assert(1 < width);
    }else{
        @set_local_color_config(C_ROUTE, universalConfig);
    }
}


// binding a color to an input queue.
// This is necessary when an explicit DSR binds to a fabin DSD because
// the compiler no longer can generate the instruction to set up the
// config register of input queue.
comptime {
    @initialize_queue(@get_input_queue(queues[0]), .{.color = C_ROUTE} );
}
