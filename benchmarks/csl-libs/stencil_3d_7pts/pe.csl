// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


param c_recv_west: color;
param c_send_east: color;
param c_recv_east: color;
param c_send_west: color;

param c_recv_south: color;
param c_send_north: color;
param c_recv_north: color;
param c_send_south: color;

param COMM: local_task_id; // entrypoint f_comm
param SEND: local_task_id; // entrypoint f_send
param RECV: local_task_id; // entrypoint f_recv

param first_px: bool;
param last_px: bool;
param first_py: bool;
param last_py: bool;

// To continue next command, f_callback = sys_mod.unblock_cmd_stream
param f_callback : fn ()void;

param input_queues:[4]u16;
// WSE2:
//   param output_queues:[1]u16;
// WSE3:
//   param output_queues:[4]u16;
param output_queues = {};

// only WSE3 needs output_ut_id
param output_ut_id = {};

param BLOCK_SIZE: i16; // size of temporary buffers for communication

// explicit DSR allocation
param dest_dsr_ids:[2]u16;
param src0_dsr_ids:[1]u16;
param src1_dsr_ids:[2]u16;


const api_wse3 = @is_arch("wse3");

// The user must specify --import-path=<path to csl-libs>
fn get_stencil_module() comptime_string {
  if (api_wse3) {
    return "../csl-libs/stencil_3d_7pts/wse3/pe.csl";
  }else{
    return "../csl-libs/stencil_3d_7pts/wse2/pe.csl";
  }
}

const stencilParams = .{
  .c_recv_west = c_recv_west,
  .c_send_east = c_send_east,
  .c_recv_east = c_recv_east,
  .c_send_west = c_send_west,

  .c_recv_south = c_recv_south,
  .c_send_north = c_send_north,
  .c_recv_north = c_recv_north,
  .c_send_south = c_send_south,

  .COMM = COMM,
  .SEND = SEND,
  .RECV = RECV,

  .first_px = first_px,
  .last_px = last_px,
  .first_py = first_py,
  .last_py = last_py,

  .f_callback = f_callback,

  .input_queues = input_queues,
  .output_queues = output_queues,
  .output_ut_id = output_ut_id,

  .BLOCK_SIZE = BLOCK_SIZE,

  .dest_dsr_ids = dest_dsr_ids,
  .src0_dsr_ids = src0_dsr_ids,
  .src1_dsr_ids = src1_dsr_ids
};

const stencil_mod = @import_module(get_stencil_module(), stencilParams);


fn spmv(n: i16, coeff: *[7]f32, x: [*]f32, y: [*]f32) void {
    stencil_mod.spmv(n, coeff, x, y);
}
