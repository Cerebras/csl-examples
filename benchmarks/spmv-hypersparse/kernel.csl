// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


param memcpyParams: comptime_struct;

param spmvParams: comptime_struct;

param reduceParams: comptime_struct;

// parameters
param nrows: u32;   // total number of matrix rows
param ncols: u32;   // total number of matrix cols (= nrows)
param max_local_nnz: u16;       // max of the local number of nonzeros (among all PEs)
param max_local_nnz_cols: u16;  // max of the local nnz cols
param max_local_nnz_rows: u16;  // max of the local nnz rows
param local_vec_sz: u16;    // size of local vector
param local_out_vec_sz: u16;    // size of local vector
param y_pad_start_row_idx: u16;   // local row index where padding starts

// data buffers
// input matrix
var mat_vals_buf = @zeros([max_local_nnz]f32);      // in matrix values (sparse): 4B
// input vector: for north-going and south-going trains
// buffer storing data for tx
var x_tx_buf = @zeros([local_vec_sz]f32);       // in vector values (dense): 4B

var mat_rows_buf = @zeros([max_local_nnz]u16);      // in matrix relative row offsets: 2B
                                                // need this in preprocessing: 2B
var mat_col_idx_buf = @zeros([max_local_nnz_cols]u16);   // column idx of nnz cols (max possible size is nnz)
var mat_col_loc_buf = @zeros([max_local_nnz_cols]u16);   // col location in mat_vals_buf and mat_rows_buf (max nnz)
var mat_col_len_buf = @zeros([max_local_nnz_cols]u16);   // col length (nnz rows in a col)
// precomputed output vector (sparse format) local rows index information
var y_rows_init_buf = @zeros([max_local_nnz_rows]u16);       // init -- this should not be modified

var local_nnz = @zeros([1]u16);         // actual local number of nonzeros
var local_nnz_cols = @zeros([1]u16);    // actual local number of nnz cols
var local_nnz_rows = @zeros([1]u16);    // actual local number of nnz rows

// final reduced local output vector (dense)
var y_local_buf = @zeros([local_out_vec_sz]f32);

// temporary buffer for allreduce
var dot = @zeros([1]f32);

const timestamp = @import_module("<time>");

const sys_mod = @import_module( "<memcpy/memcpy>", memcpyParams);

// input_queues cannot overlap with output_queues
const spmv_mod = @import_module( "hypersparse_spmv/pe.csl", @concat_structs(spmvParams, .{
     .f_callback = sys_mod.unblock_cmd_stream,

     .nrows = nrows,
     .ncols = ncols,
     .local_vec_sz = local_vec_sz,
     .max_local_nnz = max_local_nnz,
     .max_local_nnz_cols = max_local_nnz_cols,
     .max_local_nnz_rows = max_local_nnz_rows,
     .local_out_vec_sz = local_out_vec_sz,
     .y_pad_start_row_idx = y_pad_start_row_idx,

     .mat_vals_buf = &mat_vals_buf,
     .mat_rows_buf = &mat_rows_buf,
     .mat_col_idx_buf = &mat_col_idx_buf,
     .mat_col_loc_buf = &mat_col_loc_buf,
     .mat_col_len_buf = &mat_col_len_buf,
     .y_rows_init_buf = &y_rows_init_buf,
     .local_nnz = &local_nnz,
     .local_nnz_cols = &local_nnz_cols,
     .local_nnz_rows = &local_nnz_rows,

     .input_queues=[4]u16{4, 1, 6, 7},
     .output_queues=[2]u16{2,3},
     .dest_dsr_ids = [6]u16{1, 4, 5, 6, 2, 3},
     .src1_dsr_ids = [6]u16{4, 1, 6, 7, 2, 3},
     }));

// allreduce uses input queue/output queue 5
// dest_dsr and src0_dsr must be a valid pair, for example (7,1) is invalid
const reduce_mod = @import_module( "allreduce2R1E/pe.csl", @concat_structs(reduceParams, .{
     .f_callback = sys_mod.unblock_cmd_stream,
     .MAX_ZDIM = 1,
     .queues = [1]u16{5},
     .dest_dsr_ids = [1]u16{7},
     .src0_dsr_ids = [1]u16{7},
     .src1_dsr_ids = [1]u16{5}
     }));

// tsc library
var tsc_start_buffer = @zeros([timestamp.tsc_size_words]u16);
var tsc_end_buffer = @zeros([timestamp.tsc_size_words]u16);

// time_buf_u16[0:5] = {tsc_start_buffer, tsc_end_buffer}
var time_buf_u16 = @zeros([timestamp.tsc_size_words*2]u16);
var ptr_time_buf_u16: [*]u16 = &time_buf_u16;

// reference clock inside allreduce module
var time_ref_u16 = @zeros([timestamp.tsc_size_words]u16);
var ptr_time_ref_u16: [*]u16 = &time_ref_u16;

var ptr_mat_vals_buf: [*]f32 = &mat_vals_buf;
var ptr_x_tx_buf: [*]f32 = &x_tx_buf;
var ptr_y_local_buf: [*]f32 = &y_local_buf;
var ptr_mat_rows_buf: [*]u16 = &mat_rows_buf;
var ptr_mat_col_idx_buf: [*]u16 = &mat_col_idx_buf;
var ptr_mat_col_loc_buf: [*]u16 = &mat_col_loc_buf;
var ptr_mat_col_len_buf: [*]u16 = &mat_col_len_buf;
var ptr_y_rows_init_buf: [*]u16 = &y_rows_init_buf;
var ptr_local_nnz: [*]u16 = &local_nnz;
var ptr_local_nnz_cols: [*]u16 = &local_nnz_cols;
var ptr_local_nnz_rows: [*]u16 = &local_nnz_rows;


fn f_enable_tsc() void {
    timestamp.enable_tsc();

    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}

fn f_tic() void {
    timestamp.get_timestamp(&tsc_start_buffer);

    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}

fn f_toc() void {
    timestamp.get_timestamp(&tsc_end_buffer);

    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}

// compute y = A*x
//
// To ping-pong the spmv by
//    spmv(x, y) // y = A*x
//    spmv(y, x) // x = A*y
// we need to make sure local_vec_sz = local_out_vec_sz, otherwise compilation fails
// because of mismatch of the dimensions
//
fn f_spmv() void {
    spmv_mod.spmv(&x_tx_buf, &y_local_buf);
}

fn f_memcpy_timestamps() void {

    time_buf_u16[0] = tsc_start_buffer[0];
    time_buf_u16[1] = tsc_start_buffer[1];
    time_buf_u16[2] = tsc_start_buffer[2];
    time_buf_u16[3] = tsc_end_buffer[0];
    time_buf_u16[4] = tsc_end_buffer[1];
    time_buf_u16[5] = tsc_end_buffer[2];

    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}

fn f_sync( n: i16 ) void {
   reduce_mod.allreduce(n, &dot);
}

fn f_reference_timestamps() void {

    time_ref_u16[0] = reduce_mod.tscRefBuffer[0];
    time_ref_u16[1] = reduce_mod.tscRefBuffer[1];
    time_ref_u16[2] = reduce_mod.tscRefBuffer[2];

    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}

comptime{

    @export_symbol(ptr_mat_vals_buf, "mat_vals_buf");
    @export_symbol(ptr_x_tx_buf, "x_tx_buf");
    @export_symbol(ptr_y_local_buf, "y_local_buf");

    @export_symbol(ptr_mat_rows_buf, "mat_rows_buf");
    @export_symbol(ptr_mat_col_idx_buf, "mat_col_idx_buf");
    @export_symbol(ptr_mat_col_loc_buf, "mat_col_loc_buf");
    @export_symbol(ptr_mat_col_len_buf, "mat_col_len_buf");
    @export_symbol(ptr_y_rows_init_buf, "y_rows_init_buf");

    @export_symbol(ptr_local_nnz, "local_nnz");
    @export_symbol(ptr_local_nnz_cols, "local_nnz_cols");
    @export_symbol(ptr_local_nnz_rows, "local_nnz_rows");

    @export_symbol(ptr_time_buf_u16, "time_buf_u16");

    @export_symbol(ptr_time_ref_u16, "time_ref_u16");
}


comptime{
    @export_symbol(f_enable_tsc);
    @export_symbol(f_tic);
    @export_symbol(f_toc);
    @export_symbol(f_memcpy_timestamps);
    @export_symbol(f_spmv);
    @export_symbol(f_sync);
    @export_symbol(f_reference_timestamps);
}
