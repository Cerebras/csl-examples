// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// color var           color  var           color  var                color  var
//   0                 10  init             20   tx_east              30 reserved (memcpy)
//   1  c0             11  compute_north    21   reserved (memcpy)    31 reserved
//   2  c1             12  compute_south    22   reserved (memcpy)    32
//   3  c2             13  tx_north         23   reserved (memcpy)    33 reserved (memcpy)
//   4  c3             14  tx_south         24   compute_local        34 reserved (memcpy)
//   5  c4             15  rx_north         25   curr_rx_north_done   35 reserved (memcpy)
//   6  c5             16  rx_south         26   curr_rx_south_done   36 reserved (memcpy)
//   7  allreduce_c0   17  rx_east          27   reserved (memcpy)    37 reserved (memcpy)
//   8  allreduce_c1   18  rx_west          28   reserved (memcpy)
//   9  allreduce_EN1  19  tx_west          29   reserved (memcpy)

// routable colors for spmv
param c0 = @get_color(1);
param c1 = @get_color(2);
param c2 = @get_color(3);
param c3 = @get_color(4);
param c4 = @get_color(5);
param c5 = @get_color(6);

// routable colors for allreduce
param allreduce_c0 = @get_color(7);
param allreduce_c1 = @get_color(8);
// entrypoint for allreduce
param allreduce_EN1: local_task_id = @get_local_task_id(9);

// entrypoints for spmv
param EN1: local_task_id = @get_local_task_id(10);
param EN2: local_task_id = @get_local_task_id(11);
param EN3: local_task_id = @get_local_task_id(12);
param EN4: local_task_id = @get_local_task_id(13);
param EN5: local_task_id = @get_local_task_id(14);
param EN6: local_task_id = @get_local_task_id(15);
param EN7: local_task_id = @get_local_task_id(16);
param EN8: local_task_id = @get_local_task_id(17);
param EN9: local_task_id = @get_local_task_id(18);
param EN10: local_task_id = @get_local_task_id(19);
param EN11: local_task_id = @get_local_task_id(20);
param EN12: local_task_id = @get_local_task_id(24);
param EN13: local_task_id = @get_local_task_id(25);
param EN14: local_task_id = @get_local_task_id(26);


// parameters of spmv layout
//          pcols
//       +----------+
// prows |  core    |
//       +----------+
//
param prows: u16;   // number of PE rows (height of the core rectangle)
param pcols: u16;   // number of PE cols (width of the core rectangle)

// structure of the matrix
param nrows: u32;   // total number of matrix rows
param ncols: u32;   // total number of matrix cols
param max_local_nnz: u16;       // max of the local number of nonzeros (among all PEs)
param max_local_nnz_cols: u16;  // max of the local nnz cols
param max_local_nnz_rows: u16;  // max of the local nnz rows
param local_vec_sz: u16;        // size of local vector
param local_out_vec_sz: u16;    // size of local vector
param y_pad_start_row_idx: u16; // local row index where padding starts


const spmv = @import_module( "hypersparse_spmv/layout.csl", .{
    .colors = [6]color{c0, c1, c2, c3, c4, c5},
    .entrypoints = [14]local_task_id{EN1, EN2, EN3, EN4, EN5, EN6, EN7, EN8, EN9, EN10, EN11, EN12, EN13, EN14},
    .width = pcols,
    .height = prows
    });

const reduce = @import_module( "allreduce2R1E/layout.csl", .{
    .colors = [2]color{allreduce_c0, allreduce_c1},
    .entrypoints = [1]local_task_id{allreduce_EN1},
    .width = pcols,
    .height = prows
    });

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = pcols,
    .height = prows,
    });

layout {
    // NOTE: This scheme assumes prows >= 4
    @comptime_assert(prows >= 4);

    //         --> px = pcol_id
    //          pcols
    //       +----------+
    // prows |  core    |  | py = prow_id
    //       |          |  V
    //       +----------+
    @set_rectangle(pcols, prows);

    var pcol_id: u16 = 0;
    while (pcol_id < pcols) : (pcol_id += 1) {

        var prow_id: u16 = 0;
        while (prow_id < prows) : (prow_id += 1) {

            const memcpyParams = memcpy.get_params(pcol_id);
            const spmvParams = spmv.get_params(pcol_id, prow_id);
            const reduceParams = reduce.get_params(pcol_id, prow_id);
            var params: comptime_struct = .{
                .memcpyParams = memcpyParams,
                .spmvParams = spmvParams,
                .reduceParams = reduceParams,
                .nrows = nrows,
                .ncols = ncols,
                .local_vec_sz = local_vec_sz,
                .max_local_nnz = max_local_nnz,
                .max_local_nnz_cols = max_local_nnz_cols,
                .max_local_nnz_rows = max_local_nnz_rows,
                .local_out_vec_sz = local_out_vec_sz,
                .y_pad_start_row_idx = y_pad_start_row_idx,
            };
            @set_tile_code(pcol_id, prow_id, "kernel.csl", params);

        } // while prow_id
    } // while pcol_id

    @export_name("mat_vals_buf", [*]f32, true);
    @export_name("x_tx_buf", [*]f32, true);
    @export_name("y_local_buf", [*]f32, true);

    @export_name("mat_rows_buf", [*]u16, true);
    @export_name("mat_col_idx_buf", [*]u16, true);
    @export_name("mat_col_loc_buf", [*]u16, true);
    @export_name("mat_col_len_buf", [*]u16, true);
    @export_name("y_rows_init_buf", [*]u16, true);

    @export_name("local_nnz", [*]u16, true);
    @export_name("local_nnz_cols", [*]u16, true);
    @export_name("local_nnz_rows", [*]u16, true);

    @export_name("time_buf_u16", [*]u16, true);

    @export_name("time_ref_u16", [*]u16, true);

    @export_name("f_enable_tsc", fn()void);
    @export_name("f_tic", fn()void);
    @export_name("f_toc", fn()void);
    @export_name("f_spmv", fn()void);
    @export_name("f_memcpy_timestamps", fn()void);
    @export_name("f_sync", fn(i16)void);
    @export_name("f_reference_timestamps", fn()void);
}
