// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// These are switch commands that tell the receiving router to either do nothing
// or advance the switch position.
const sw_nop = 0;
const sw_adv = 1;

// This function computes the payload field of the control wavelet.  The `cmds`
// argument contains the switch commands for seven downstream PEs.
fn ctrl(cmds: [8]u16) u32 {
  // Tell the router to not forward control wavelets to the PE.
  const ceFilter = true;

  // Color 31 is special.  It is the hardware's way of saying null color.
  const colorToActivate = 31;

  var result: u32 = 0;
  result |= (colorToActivate & 0x1f) << 16;

  result |= @as(u32, cmds[0] & 0b11) << 22;
  result |= @as(u32, ceFilter) << 24;

  result |= @as(u32, cmds[1] & 0b11) << 25;
  result |= @as(u32, ceFilter) << 27;

  result |= @as(u32, cmds[2] & 0b11) << 28;
  result |= @as(u32, ceFilter) << 0;

  result |= @as(u32, cmds[3] & 0b11) << 1;
  result |= @as(u32, ceFilter) << 3;

  result |= @as(u32, cmds[4] & 0b11) << 4;
  result |= @as(u32, ceFilter) << 6;

  result |= @as(u32, cmds[5] & 0b11) << 7;
  result |= @as(u32, ceFilter) << 9;

  result |= @as(u32, cmds[6] & 0b11) << 10;
  result |= @as(u32, ceFilter) << 12;

  result |= @as(u32, cmds[7] & 0b11) << 13;
  result |= @as(u32, ceFilter) << 15;

  return result;
}

// This computes the (first) control wavelet, which advances the switch position
// at (1) the current PE's router, (2) the next PE's router, and (3) the router
// of the last PE in the group of `pattern` PEs (if it's different from the next
// PE).
fn firstSwitchCommands(pattern: u16) [8]u16 {
  @comptime_assert(pattern <= 8);

  var cmds = @constants([8]u16, sw_nop);
  cmds[0] = sw_adv;
  cmds[1] = sw_adv;
  cmds[pattern - 1] = sw_adv;

  return cmds;
}

// Computes the (second) control wavelet, which advances only the current PE's
// switch position.
fn secondSwitchCommands() [8]u16 {
  var cmds = @constants([8]u16, sw_nop);
  cmds[0] = sw_adv;
  return cmds;
}
