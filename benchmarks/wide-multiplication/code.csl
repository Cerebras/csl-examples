// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The core kernel must start at P4.1 so the memcpy infrastructure has enough
// resources to route the data between the host and the device.
//

// color map of wide-multiplication + memcpy:
//
// color  var    color  var              color  var              color  var
//   0 H2D          9  triggerColor        18                      27   reserved (memcpy)
//   1 D2H         10                      19                      28   reserved (memcpy)
//   2 LAUNCH      11                      20                      29   reserved
//   3             12                      21    reserved (memcpy) 30   reserved (memcpy)
//   4             13                      22    reserved (memcpy) 31   reserved
//   5             14                      23    reserved (memcpy) 32
//   6             15                      24                      33
//   7             16                      25                      34
//   8             17                      26                      35
//

param MEMCPYH2D_DATA_1_ID : i16;
param MEMCPYD2H_DATA_1_ID : i16;
param LAUNCH_ID: i16;

// Streaming H2D color to receive input data
const MEMCPYH2D_DATA_1 : color = @get_color(MEMCPYH2D_DATA_1_ID);

// Streaming D2H color to signal the completion of the program back to the host
const MEMCPYD2H_DATA_1 : color = @get_color(MEMCPYD2H_DATA_1_ID);

// Setup the length of H2D
const LAUNCH: color = @get_color(LAUNCH_ID);

// Entrypoint to trigger computation at the end of the input data
const triggerColor: color = @get_color(9);

// The number of bits to use for the result.  Inputs, also, use the same bits.
// Since overflow, if any, is ignored, set the bits to be large enough so that
// the computation doesn't overflow for the numbers you care about.
param numBits: u16;

const memcpy = @import_module( "<memcpy_multi/get_params>", .{
    .width = 1,
    .height = 1
    });

layout {
  @set_rectangle(1, 1);

  const memcpy_params = memcpy.get_params(0);

  @set_tile_code(0, 0, "pe.csl", .{
    .memcpy_params = memcpy_params,
    .numBits = numBits,
    .LAUNCH = LAUNCH,
    .MEMCPYH2D_DATA_1 = MEMCPYH2D_DATA_1,
    .MEMCPYD2H_DATA_1 = MEMCPYD2H_DATA_1,
    .triggerColor = triggerColor,
  });

  // export symbol name
  @export_name("result_", [*]u16, true);
  @export_name("f_run", fn(i16)void);
}

comptime{
  @comptime_assert(MEMCPYH2D_DATA_1_ID == 0);
  @comptime_assert(MEMCPYD2H_DATA_1_ID == 1);
  @comptime_assert(LAUNCH_ID == 2);
}
