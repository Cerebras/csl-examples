// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


param c_recv_px: color;
param c_send_px: color;
param c_recv_py: color;
param c_send_py: color;
param c_bcast: color;

param STARTUP: local_task_id;
param SYNC_Y: local_task_id;
param SYNC_BCAST: local_task_id;
param EXIT: local_task_id;

param first_px: bool;
param last_px: bool;
param first_py: bool;
param last_py: bool;

// f_callback = sys_mod.unblock_cmd_stream, to continue next command
param f_callback : fn ()void;

// input_queues={2,3,4}
// output_queues={2,3,4}
param input_queues:[3]u16;
param output_queues:[3]u16;

const c_recv_px_iq = @get_input_queue(input_queues[0]);
const c_send_px_oq = @get_output_queue(output_queues[0]);

const c_recv_py_iq = @get_input_queue(input_queues[1]);
const c_send_py_oq = @get_output_queue(output_queues[1]);

const c_bcast_iq = @get_input_queue(input_queues[2]);
const c_bcast_oq = @get_output_queue(input_queues[2]);

const timestamp = @import_module("<time>");

// tsc_size_words = 3
var tscRefBuffer = @zeros([timestamp.tsc_size_words]u16);

////////////////////////////////////////////////////////////////////////////////
// Main memory (48KB)
////////////////////////////////////////////////////////////////////////////////

var buf = @zeros([1]f32);

////////////////////////////////////////////////////////////////////////////////
// Tasks
// syntax
//     task_begin(name, entrypoint, color)
////////////////////////////////////////////////////////////////////////////////

const mem_buf_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> buf[i] });

var fab_recv_data_px_wdsd =  @get_dsd(fabin_dsd, .{
   .extent = 1,
   .fabric_color = c_recv_px,
   .input_queue = c_recv_px_iq
});

var fab_trans_data_px_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = c_send_px,
    .output_queue = c_send_px_oq
});

var fab_recv_data_py_wdsd =  @get_dsd(fabin_dsd, .{
   .extent = 1,
   .fabric_color = c_recv_py,
   .input_queue = c_recv_py_iq
});

var fab_trans_data_py_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = c_send_py,
    .output_queue = c_send_py_oq
});

var fab_recv_data_bcast_wdsd =  @get_dsd(fabin_dsd, .{
   .extent = 1,
   .fabric_color = c_bcast,
   .input_queue = c_bcast_iq
});

var fab_trans_data_bcast_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = c_bcast,
    .output_queue = c_bcast_oq
});



// Each row performs a sync from the last PE to first PE
fn f_sync() void {
    // sync a row
    if (last_px){
        // px = width-1: send sync signal
        @mov32(fab_trans_data_px_wdsd, mem_buf_dsd, .{.async=true, .activate = f_sync_y });
    }else{
        if (first_px){
            // px = 0: receive signal
            @mov32(mem_buf_dsd, fab_recv_data_px_wdsd, .{.async=true, .activate = f_sync_y });
        }else{
            // 0 < px < width-1: receive signal and forward it
            @mov32(fab_trans_data_px_wdsd, fab_recv_data_px_wdsd, .{.async=true, .activate = f_sync_y });
        }
    }
}


// prerequisite: row synchronization is done
//   the first PE is the last one to receive the signal
// The first column performs a sync from last PE to first PE
// other PEs wait for bcast signal
task f_sync_y() void {
    if (first_px){
        // 1st column performs a sync
        if (last_py){
            // py = height-1: send sync signal
            @mov32(fab_trans_data_py_wdsd, mem_buf_dsd, .{.async=true, .activate = f_sync_bcast });
        }else{
            if (first_py){
                // py = 0: receive signal
                @mov32(mem_buf_dsd, fab_recv_data_py_wdsd, .{.async=true, .activate = f_sync_bcast });
            }else{
                // 0 < py < height-1: receive signal and forward it
                @mov32(fab_trans_data_py_wdsd, fab_recv_data_py_wdsd, .{.async=true, .activate = f_sync_bcast });
            }
        }
    }else{
        // other PEs wait for bcast signal
        @activate(SYNC_BCAST); // trigger f_sync_bcast
    }
}

// prerequisite: sync is done, P0.0 is the last one to receive the sync
// P0.0 broadcasts the signal, others wait for the bcast signal from P0.0
task f_sync_bcast() void {

    if ( first_px and first_py ){
        // P0.0 sends the signal
        @mov32(fab_trans_data_bcast_wdsd, mem_buf_dsd, .{.async=true, .activate = f_exit });
    }else{
        // others wait for bcast from P0.0
        @mov32(mem_buf_dsd, fab_recv_data_bcast_wdsd, .{.async=true, .activate = f_exit });
    }
}

// record reference clock T
// T is regarded as clock 0 because all PEs sync with P0.0
task f_exit() void {

    timestamp.get_timestamp(&tscRefBuffer);

    //sys_mod.unblock_cmd_stream();
    f_callback();
}


task f_startup() void {
    timestamp.enable_tsc();
}

comptime {
    @activate(STARTUP);

    @bind_local_task(f_startup, STARTUP);
    @bind_local_task(f_sync_y, SYNC_Y);
    @bind_local_task(f_sync_bcast, SYNC_BCAST);
    @bind_local_task(f_exit, EXIT);

    // On WSE-3, we must explicitly initialize input and output queues
    if (@is_arch("wse3")) {
        @initialize_queue(c_recv_px_iq, .{ .color = c_recv_px });
        @initialize_queue(c_send_px_oq, .{ .color = c_send_px });

        @initialize_queue(c_recv_py_iq, .{ .color = c_recv_py });
        @initialize_queue(c_send_py_oq, .{ .color = c_send_py });

        @initialize_queue(c_bcast_iq, .{ .color = c_bcast });
        @initialize_queue(c_bcast_oq, .{ .color = c_bcast });
    }
}


// sync a row with C0 and C1
//
//     C0     C1     C0     C1
// P0 <-- P1 <-- P2 <-- P3 <-- P4
//
//     C0     C1     C0     C1     C0
// P0 <-- P1 <-- P2 <-- P3 <-- P4 <-- P5
//
// P0: recv C0
// P_even: recv C0, send C1
// P_odd: recv C1, send C0
// P_last: send C0 if odd; send C1 if even
comptime {
    if (first_px){
        // px = 0: receive from east
        @set_local_color_config(c_recv_px, .{ .routes = .{ .rx = .{EAST}, .tx = .{RAMP} } } );
    }else{
        if (last_px){
           // px = width-1: send to west
           @set_local_color_config(c_send_px, .{ .routes = .{ .rx = .{RAMP}, .tx = .{WEST} } } );
        }else{
           // 0 < px < width-1: receive from east, send to west
           @set_local_color_config(c_recv_px, .{ .routes = .{ .rx = .{EAST}, .tx = .{RAMP} } } );
           @set_local_color_config(c_send_px, .{ .routes = .{ .rx = .{RAMP}, .tx = .{WEST} } } );
        }
    }
}

// sync a col with C2 and C3
//     C2     C3     C2     C3
// P0 <-- P1 <-- P2 <-- P3 <-- P4
//
//     C2     C3     C2     C3     C2
// P0 <-- P1 <-- P2 <-- P3 <-- P4 <-- P5
//
// P0: recv C2
// P_even: recv C2, send C3
// P_odd: recv C3, send C2
// P_last: send C2 if odd; send C3 if even
comptime {
    if (first_py){
        // py = 0 (even): receive from south
        @set_local_color_config(c_recv_py, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } } );
    }else{
        if (last_py){
           // py = height-1: send to north
           @set_local_color_config(c_send_py, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } } );
        }else{
           // 0 < py < height-1: receive from south, send to north
           @set_local_color_config(c_recv_py, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } } );
           @set_local_color_config(c_send_py, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } } );
        }
    }
}


// w > 1 and h > 1
//  x --> x --> x
//  |
//  V
//  x --> x --> x
//  |
//  V
//  x --> x --> x
//
// WARNING: corner case for w=1 or h=1
comptime {
    if (first_px){
        // px = 0
        if (first_py){
            // P0,0: send to east and south
            @set_local_color_config(c_bcast, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST, SOUTH} } } );
        }else{
            if (last_py){
                // P0,h-1
                @set_local_color_config(c_bcast, .{ .routes = .{ .rx = .{NORTH}, .tx = .{EAST, RAMP} } } );
            }else{
                // P0,py: 0 < py < height-1
                @set_local_color_config(c_bcast, .{ .routes = .{ .rx = .{NORTH}, .tx = .{EAST, RAMP, SOUTH} } } );
            }
        }
    }else{
        if (last_px){
            // px = width-1
           @set_local_color_config(c_bcast, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } } );
        }else{
            // 0 < px < width-1
           @set_local_color_config(c_bcast, .{ .routes = .{ .rx = .{WEST}, .tx = .{EAST, RAMP} } } );
        }
    }
}
