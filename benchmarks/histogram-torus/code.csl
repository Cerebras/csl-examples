// Copyright 2025 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// color/ task ID map of histogram-torus + memcpy:
//
// ID var                ID var                  ID var                ID var
//   0 ns_routes.c0       9                      18                    27 reserved (memcpy)
//   1 ns_routes.c1      10 H2D                  19                    28 reserved (memcpy)
//   2 ns_routes.c2      11 D2H                  20                    29 reserved
//   3 ns_routes.c3      12 tally.c0             21 reserved (memcpy)  30 reserved (memcpy)
//   4 we_routes.c0      13 tally.c1             22 reserved (memcpy)  31 reserved
//   5 we_routes.c1      14 tally.c2             23 reserved (memcpy)  32
//   6 we_routes.c2      15 TALLY_EXIT           24 START              33
//   7 we_routes.c3      16                      25 SENDER_NS          34
//   8 OUT_COLOR         17                      26 SENDER_WE          35
//

param MEMCPYH2D_DATA_1_ID: i16;
param MEMCPYD2H_DATA_1_ID: i16;

param INPUT_SIZE: u32;
param NUM_BUCKETS: u32;
param BUCKET_SIZE: u32;
param HIST_WIDTH: i16;
param HIST_HEIGHT: i16;

// Colors
param OUT_COLOR: color;
const MEMCPYH2D_DATA_1: color = @get_color(MEMCPYH2D_DATA_1_ID);
const MEMCPYD2H_DATA_1: color = @get_color(MEMCPYD2H_DATA_1_ID);

const tally = @import_module("<kernels/tally/layout>", .{
  .kernel_height=HIST_HEIGHT,
  .kernel_width=HIST_WIDTH,
  .phase2_tally=@as(u32, HIST_WIDTH) * @as(u32, HIST_HEIGHT) * INPUT_SIZE,
  .colors=[3]color{@get_color(12), @get_color(13), @get_color(14)},
  .output_color=OUT_COLOR,
});

const ns_routes = @import_module("routes.csl", .{
  .FIRST_COLOR = 0,
  .LAST_PE = HIST_HEIGHT-1,
  .FROM = NORTH,
});

const we_routes = @import_module("routes.csl", .{
  .FIRST_COLOR = ns_routes.next_available_color(),
  .LAST_PE = HIST_WIDTH-1,
  .FROM = WEST,
});

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = HIST_WIDTH,
    .height = HIST_HEIGHT,
    .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
    .MEMCPYD2H_1 = MEMCPYD2H_DATA_1
    });

layout {
  @comptime_assert(INPUT_SIZE > 0);
  @comptime_assert(HIST_WIDTH > 0 and HIST_WIDTH <= 1024);   // 10 bits
  @comptime_assert(HIST_HEIGHT > 0 and HIST_HEIGHT <= 1024); // 10 bits
  @comptime_assert(NUM_BUCKETS > 0 and NUM_BUCKETS <= 4096); // 12 bits

  @set_rectangle(HIST_WIDTH, HIST_HEIGHT);

  const histogramParams = .{
    .HIST_WIDTH=HIST_WIDTH,
    .INPUT_SIZE=INPUT_SIZE,
    .N_BUCKETS=NUM_BUCKETS,
    .BUCKET_SIZE=BUCKET_SIZE,
  };

  for (@range(i16, HIST_WIDTH)) |i| {
    const we_colors = we_routes.get_colors_we(i);
    for (@range(i16, HIST_HEIGHT)) |j| {
      const tally_params = tally.get_params(i, j);
      const ns_colors = ns_routes.get_colors_ns(j);
      const all_params =
        @concat_structs(histogramParams,
        @concat_structs(we_colors,
        @concat_structs(ns_colors, .{ .tally_params = tally_params })));

      const memcpy_params = memcpy.get_params(i);

      @set_tile_code(i, j, "histogram.csl", @concat_structs( .{
        .memcpy_params = memcpy_params,
      }, all_params));
      ns_routes.set_routes(i, j, j);
      we_routes.set_routes(i, j, i);
    }
  }

  // export symbol name
  @export_name("inputs", [*]u32, true);
  @export_name("buckets", [*]u32, true);
  @export_name("f_run", fn()void);
}
