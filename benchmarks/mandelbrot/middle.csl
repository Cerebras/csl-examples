// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


const common = @import_module("common.csl");

const recv_task_color: color = @get_color(8);
const process_task_color: color = @get_color(9);

param pe_x: u32;
param pe_y: u32;

param in_color;
param out_color;

param image_height: u32;
param image_width: u32;
param max_iters: u32;

param rows_per_pe: u32;

param last_col: bool;

param memcpy_params: comptime_struct;
param MEMCPYD2H_DATA_1: color;
param LAUNCH: color;

// input/output queue ID = 0 is reserved for memcpy module
const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

var col: u32 = 0;
var row: u32 = pe_y * rows_per_pe;

var packet = @zeros([3]f32);
const mem_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{3} -> packet[i] });

var ptr_packet : [*]f32 = &packet;

param x_lo: f32;
param x_hi: f32;
param y_lo: f32;
param y_hi: f32;

task recv() void {
  const in = @get_dsd(fabin_dsd,
             .{.fabric_color = in_color, .extent = 3, .input_queue = @get_input_queue(1) });
  @mov32(mem_dsd, in, .{ .async = true, .activate = process });
}

task process() void {

  const x = common.get_x(col, x_lo, x_hi, image_width);
  const y = common.get_y(row, y_lo, y_hi, image_height);

  common.mandelbrot(max_iters, &packet[0], &packet[1], &packet[2], x, y);

  col += 1;
  if (col == image_width) {
    row += 1;
    col = 0;
  }

  if (last_col){
    // memcpy streaming out 3 wavelets
    const out = @get_dsd(fabout_dsd,
              .{.fabric_color = MEMCPYD2H_DATA_1, .extent = 3, .output_queue = @get_output_queue(1) });
    @mov32(out, mem_dsd, .{ .async = true, .activate = recv });
  }else{
    // send 3 wavelets to the east neighbor
    const out = @get_dsd(fabout_dsd,
              .{.fabric_color = out_color, .extent = 3, .output_queue = @get_output_queue(1) });
    @mov32(out, mem_dsd, .{ .async = true, .activate = recv });
  }
}

comptime {
  @bind_task(recv, recv_task_color);

  @bind_task(process, process_task_color);

  @block(in_color);
}

fn f_mandelbrot() void {
  @activate(recv_task_color);

  // kick and run: trigger main_color asynchronously,
  // RPC continues while mandelbrot is still running
  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(ptr_packet, "packet");
  @export_symbol(f_mandelbrot);
  @rpc(LAUNCH);
}
