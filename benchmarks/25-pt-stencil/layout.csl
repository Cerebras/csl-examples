// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// The code for this 3D 25-point stencil was inspired by the proprietary code //
// of TotalEnergies EP Research & Technology US.                              //
////////////////////////////////////////////////////////////////////////////////

// The core kernel must start at P4.1 so the memcpy infrastructure has enough
// resources to route the data between the host and the device.
//

// color map of FD + memcpy:
//
// color  var             color  var          color  var              color  var
//   0                      9    westDataFin   18    northCtrlFin2     27   reserved (memcpy)
//   1                     10    northDataFin  19    southCtrlFin2     28   reserved (memcpy)
//   2   f_comp            11    southDataFin  20    eastFin           29   reserved (memcpy)
//   3   send              12    eastCtrlFin   21    reserved (memcpy) 30   reserved (memcpy)
//   4   eastChannel       13    westCtrlFin   22    reserved (memcpy) 31   reserved
//   5   westChannel       14    northCtrlFin  23    reserved (memcpy) 32
//   6   northChannel      15    southCtrlFin  24    westFin           33
//   7   southChannel      16    eastCtrlFin2  25    northFin          34
//   8   eastDataFin       17    westCtrlFin2  26    southFin          35
//

// Colors
param eastChannel:  color = @get_color(4);
param westChannel:  color = @get_color(5);
param northChannel: color = @get_color(6);
param southChannel: color = @get_color(7);

// Task IDs
param send: local_task_id = @get_local_task_id(3);
param COMP: local_task_id = @get_local_task_id(2);

param eastDataFin:  local_task_id = @get_local_task_id(8);
param westDataFin:  local_task_id = @get_local_task_id(9);
param northDataFin: local_task_id = @get_local_task_id(10);
param southDataFin: local_task_id = @get_local_task_id(11);

param eastCtrlFin:  local_task_id = @get_local_task_id(12);
param westCtrlFin:  local_task_id = @get_local_task_id(13);
param northCtrlFin: local_task_id = @get_local_task_id(14);
param southCtrlFin: local_task_id = @get_local_task_id(15);

// the following four are entrypoints (send control wavelets for switch)
// we don't need to bind it to 0~23
param eastCtrlFin2:  local_task_id = @get_local_task_id(16);
param westCtrlFin2:  local_task_id = @get_local_task_id(17);
param northCtrlFin2: local_task_id = @get_local_task_id(18);
param southCtrlFin2: local_task_id = @get_local_task_id(19);

param eastFin:  local_task_id = @get_local_task_id(20);
// WARNING: ID 21: reserved (memcpy)
// WARNING: ID 22: reserved (memcpy)
//          ID 23: reserved (memcpy)
param westFin:  local_task_id = @get_local_task_id(24);
param northFin: local_task_id = @get_local_task_id(25);
param southFin: local_task_id = @get_local_task_id(26);


param width: u16;
param height: u16;
param zDim: u16;
param sourceLength: u16;
param dx: u16;

// Number of neighbors (plus self) that each PE will communicate with in all
// directions.  The (three-dimensional) stencil size is `6 * (pattern - 1) + 1`.
const pattern: u16 = 5;

//// The coordinates of the "source" PE, which adds a small value to the wavefield
//// in each iteration.
param srcX: u16;
param srcY: u16;
param srcZ: u16;

// The following parameters are the same for every PE, so we extract them out of
// the loop that sets PE-specific parameters below.
const invariants = .{
  .send = send,
  .zDim = zDim,
  .pattern = pattern,
  .sourceLength = sourceLength,
  .dx = dx,
  .width = width,
  .height = height,
  .srcZ = srcZ,

  .eastFin = eastFin,
  .westFin = westFin,
  .northFin = northFin,
  .southFin = southFin,

  .eastDataFin = eastDataFin,
  .westDataFin = westDataFin,
  .northDataFin = northDataFin,
  .southDataFin = southDataFin,

  .eastCtrlFin = eastCtrlFin,
  .westCtrlFin = westCtrlFin,
  .northCtrlFin = northCtrlFin,
  .southCtrlFin = southCtrlFin,

  .eastCtrlFin2 = eastCtrlFin2,
  .westCtrlFin2 = westCtrlFin2,
  .northCtrlFin2 = northCtrlFin2,
  .southCtrlFin2 = southCtrlFin2,

  .eastChannel = eastChannel,
  .westChannel = westChannel,
  .northChannel = northChannel,
  .southChannel = southChannel,
};

const util = @import_module("util.csl");

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = width,
    .height = height,
    });

layout {
  @comptime_assert(pattern <= width);
  @comptime_assert(pattern <= height);
  @comptime_assert(pattern > 1 and pattern < 8);

  // step 1: configure the rectangle which does not include halo
  @set_rectangle(width, height);

  // step 2: compile csl code for a set of PEx.y and generate out_x_y.elf
  //   format: @set_tile_code(x, y, code.csl, param_binding);

  var xId = 0;
  while (xId < width) : (xId += 1) {

    // We specify the communication pattern is just one
    // (eastward) direction out of the four cardinal directions (east, west,
    // north, and south).  We then mirror the communication pattern in all other
    // directions using relative PE IDs.  For instance, westward communication
    // is identical to eastward communication with decreasing X coordinates.
    // Similarly, southward communication is the same as eastward communication,
    // except using the Y coordinate instead of the X coordinate.

    // Here we compute the relative coordinates for westward and eastward
    // communication.
    const westPeId = util.computeRelativePeId(xId, width, WEST);
    const eastPeId = util.computeRelativePeId(xId, width, EAST);

    const westParams = .{
      .westFirst = westPeId == 0,
      .westLast = westPeId == width - 1,
      .westPatternId = westPeId % pattern,
      .westNotNeedsPos3 = westPeId < pattern - 1,
      .westPatternFirst = westPeId % pattern == 0,
      .westPatternLast = westPeId % pattern == pattern - 1,
      .westSenderCount = util.min(pattern, westPeId + 1),
    };

    const eastParams = .{
      .eastFirst = eastPeId == 0,
      .eastLast = eastPeId == width - 1,
      .eastPatternId = eastPeId % pattern,
      .eastNotNeedsPos3 = eastPeId < pattern - 1,
      .eastPatternFirst = eastPeId % pattern == 0,
      .eastPatternLast = eastPeId % pattern == pattern - 1,
      .eastSenderCount = util.min(pattern, eastPeId + 1),
    };

    const hParams = @concat_structs(westParams, eastParams);

    var yId = 0;
    while (yId < height) : (yId += 1) {

      // Here we compute the relative coordinates for northward and southward
      // communication.
      const northPeId = util.computeRelativePeId(yId, height, NORTH);
      const southPeId = util.computeRelativePeId(yId, height, SOUTH);

      const northParams = .{
        .northFirst = northPeId == 0,
        .northLast = northPeId == height - 1,
        .northPatternId = northPeId % pattern,
        .northNotNeedsPos3 = northPeId < pattern - 1,
        .northPatternFirst = northPeId % pattern == 0,
        .northPatternLast = northPeId % pattern == pattern - 1,
        .northSenderCount = util.min(pattern, northPeId + 1),
      };

      const southParams = .{
        .southFirst = southPeId == 0,
        .southLast = southPeId == height - 1,
        .southPatternId = southPeId % pattern,
        .southNotNeedsPos3 = southPeId < pattern - 1,
        .southPatternFirst = southPeId % pattern == 0,
        .southPatternLast = southPeId % pattern == pattern - 1,
        .southSenderCount = util.min(pattern, southPeId + 1),
      };

      const vParams = @concat_structs(northParams, southParams);
      const dirParams = @concat_structs(hParams, vParams);
      const baseParams = @concat_structs(invariants, dirParams);

      const params = @concat_structs(.{
        .isSourcePe = xId == srcX and yId == srcY,
        .isTscOutPe = xId == width - 1 and yId == 0,
      }, baseParams);


      // additional colors for memcpy
      const params_task = @concat_structs( .{
            .COMP = COMP,
            ._px=xId,
      }, params);

      const memcpyParams = memcpy.get_params(xId);

      @set_tile_code(xId, yId, "task.csl", @concat_structs( .{
            .memcpyParams = memcpyParams,
      }, params_task));

    }
  }

  // step 3: global and internal routing
  //  format: @set_color_config(x, y, color, route);

  // export symbol name
  @export_name("vp", [*]f32, true);
  @export_name("source", [*]f32, true);
  @export_name("maxmin_time", [*]f32, true);
  @export_name("zout", [*]f32, true);

  @export_name("f_activate_comp", fn(u32)void);
  @export_name("f_prepare_zout", fn()void);
}
