// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param memcpyParams: comptime_struct;

// Colors
const LR_color: color = @get_color(4);
const RL_color: color = @get_color(5);

// Task IDs
const EXIT:                local_task_id = @get_local_task_id(10);
const sync_task_id:        local_task_id = @get_local_task_id(11);
const transposeLR_task_id: local_task_id = @get_local_task_id(12);
const transposeRL_task_id: local_task_id = @get_local_task_id(13);
const sentinelLR_task_id:  local_task_id = @get_local_task_id(16);
const sentinelRL_task_id:  local_task_id = @get_local_task_id(17);

const sys_mod = @import_module( "<memcpy/memcpy>", memcpyParams);

// Problem size
param Nz: i16;
param Nx: i16;
param Ny: i16;

// Number of PEs in the Row
param WIDTH: i16;
param HEIGHT: i16;

param FP: i16;
param tensor_type: type;

const Tx: i16 = Nx/WIDTH;
const Ty: i16 = Ny/HEIGHT;
const Tz: i16 = Tx;


// Index of the PE
param PE_X: i16;

// PE_X0 and PE_XW are hacks since we cannot set
// these indices conditionally on the DSD declaration.
param PE_X0: i16;
param PE_XW: i16;

const WIDTHm1: i16 = WIDTH-1;
const REV_PE_X: i16 = WIDTHm1-PE_XW;

// In half words
const ELEM_SIZE: i16 = 2;
const WAVELETS_PER_ELEM: i16 = FP;

// Depth of the array of Bricks of T^3
const DEPTH = Nz/Tz;
// Length of the Pencil array of elements (complex numbers)
const PENCIL_ELEMS = Nz; //DEPTH*Tz
const PENCIL_LEN = PENCIL_ELEMS*ELEM_SIZE;
const PENCIL_NUM = Tx * Ty;

// Local Tensor
const BRICK_ELEMS = Tx*Ty*Tz;
const BRICK_WAVELETS = BRICK_ELEMS*WAVELETS_PER_ELEM;
const BRICK_LEN = BRICK_ELEMS*ELEM_SIZE;
const ARRAY_LEN = DEPTH*BRICK_LEN; // 2 as complex+real

var X = @zeros([ARRAY_LEN]tensor_type);
var X_transposed = @zeros([ARRAY_LEN]tensor_type);
var f = @zeros([Nz]tensor_type);

var ptr_X: [*]tensor_type = &X;
var ptr_f: [*]tensor_type = &f;

// Sentinel data for a sequence of NOP_NOCE and ADVANCE_NOCE
var sentinel_data = @constants([2]u32, 0x8b009249);

// Filter counters
var sync_cnt: i16 = 0;
var rev: i16 = 1;

const X_transposed_base_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> X_transposed[i] });
const X_base_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> X[i] });

// Number of Wavelets sent: each PE sends one element to all the other PEs (total of DEPTH-1 elements),
// so each PE receives DEPTH-1 elements from DEPTH-1 PEs, one from each.
const TRANS_LEN = (DEPTH-1)*BRICK_WAVELETS;

// Send Data from the left to the right part of the row (transposing the right triangular submatrix).
// All PEs send elements from 1 to N (since we have complex numbers, the second element is at i+BRICK_LEN).
// Technically each element would only need to send from left to right, from its PE_X index to N,
// but then each PE would send one less element each time which would require runtime update of filters
// in teardown mode. This is not supported yet in CSL, so we just send fixed N-1 elements although only
// N-PE_X elements are used. Fabric Filters do the job of removing the extra wavelets that are sent since
// each PE catches one element in every N-1 elements.
const sendLeftData_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{TRANS_LEN} -> X[i+BRICK_LEN] });
// Send Data from the right to the left part of the Row (transposing the left triangular submatrix).
const sendRightData_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{TRANS_LEN} -> X[i]});

// Here we send elements from N-2 to 0. Once again, technically only elements from PE_X-1 to 0 are necessary.
// Therefore, each PE sends N-1 elements on each color.
const sendLR_dsd = @get_dsd(fabout_dsd, .{ .extent = TRANS_LEN, .fabric_color = LR_color,
                                           .output_queue = @get_output_queue(2) });
const sendRL_dsd = @get_dsd(fabout_dsd, .{ .extent = TRANS_LEN, .fabric_color = RL_color,
                                           .output_queue = @get_output_queue(3) });

// Each PE receives as many bricks in each direction as PEs are in that direction
const recvLR_dsd = @get_dsd(fabin_dsd,  .{ .extent = PE_X0*BRICK_WAVELETS, .fabric_color = LR_color,
                                           .input_queue = @get_input_queue(0) });
const recvRL_dsd = @get_dsd(fabin_dsd,  .{ .extent = REV_PE_X*BRICK_WAVELETS, .fabric_color = RL_color,
                                           .input_queue = @get_input_queue(1) });

// DSDs to send control wavelets to advance switches. We need to advance 2 positions, thus send 2 sentinels.
const sentinelLR_dsd = @get_dsd(fabout_dsd, .{ .extent = 2, .fabric_color = LR_color, .control = true,
                                               .output_queue = @get_output_queue(2) });
const sentinelRL_dsd = @get_dsd(fabout_dsd, .{ .extent = 2, .fabric_color = RL_color, .control = true,
                                               .output_queue = @get_output_queue(3) });

// DSD describing the DSD that contains the payload of the control wavelets.
const sentinelData_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{2} -> sentinel_data[i]});

// Memory DSD to receive data from Fabin. This DSD gets one element each time. It reads PE_X from
// the left and WIDTH-PE_X fromt he right. The PE_X0 and PE_XW are a hack so that the compiler doesn't
// complain about a DSD with length 0.
// In reality these DSD at the corners (PEs 0 and WIDTH-1) don't use these DSD so they could be NULL.
const recvDataLeft_dsd  = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{PE_X0*BRICK_WAVELETS} -> X_transposed[i] });
const recvDataRight_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{REV_PE_X*BRICK_WAVELETS} -> X_transposed[ARRAY_LEN-2-i]});

// Import the code in the file `fft.csl` as the module `mod`, and
// instantiate the module's `N` parameter.

const mod = @import_module("fft.csl", .{ .N = Nz, .ARRAY_LEN = ARRAY_LEN, .X=&X, .FP=FP, .tensor_type=tensor_type});

var inv_mode: bool;

fn f_fft() void {
  inv_mode = false;

  mod.fft(&f);

  // Initiate the Data Transpose
  if (WIDTH > 0) {
    if (sync_cnt == 0) {
      if (PE_X == 0) {
        @fmovs(sendLR_dsd, sendLeftData_dsd, .{ .async = true, .activate = sentinelLR_task_id });
      } else {
        @fmovs(recvDataLeft_dsd,  recvLR_dsd, .{ .async = true, .activate = transposeLR_task_id });
      }
      if (PE_X == WIDTHm1) {
        @fmovs(sendRL_dsd, sendRightData_dsd, .{ .async = true, .activate = sentinelRL_task_id });
      } else {
        @fmovs(recvDataRight_dsd, recvRL_dsd, .{ .async = true, .activate = transposeRL_task_id });
      }
    } else {
      @activate(EXIT);
    }
  }
}

fn f_ifft() void {
  inv_mode = true;

  mod.ifft(&f);

  // Initiate the Data Transpose
  if (WIDTH > 0) {
    if (sync_cnt == 0) {
      if (PE_X == 0) {
        @fmovs(sendLR_dsd, sendLeftData_dsd, .{ .async = true, .activate = sentinelLR_task_id });
      } else {
        @fmovs(recvDataLeft_dsd,  recvLR_dsd, .{ .async = true, .activate = transposeLR_task_id });
      }
      if (PE_X == WIDTHm1) {
        @fmovs(sendRL_dsd, sendRightData_dsd, .{ .async = true, .activate = sentinelRL_task_id });
      } else {
        @fmovs(recvDataRight_dsd, recvRL_dsd, .{ .async = true, .activate = transposeRL_task_id });
      }
    } else {
      @activate(EXIT);
    }
  }
}


// Continue the Data Transpose. Receive as much data as the position of the PE.
task transposeLR() void {
  if (PE_X == WIDTHm1) {
    @activate(sync_task_id);
  } else {
    @fmovs(sendLR_dsd, sendLeftData_dsd, .{ .async = true, .activate = sentinelLR_task_id });
  }
}

task transposeRL() void {
  if (PE_X == 0) {
    @activate(sync_task_id);
  } else {
    @fmovs(sendRL_dsd, sendRightData_dsd, .{ .async = true, .activate = sentinelRL_task_id });
  }
}

// Send control wavelets to advance the switches
task sentinelLR() void {
  @mov32(sentinelLR_dsd, sentinelData_dsd, .{ .async = true, .activate = sync_task_id });
}

task sentinelRL() void {
  @mov32(sentinelRL_dsd, sentinelData_dsd, .{ .async = true, .activate = sync_task_id });
}

task sync() void {
  sync_cnt += 1;
  if (sync_cnt == 2) {
    if (PE_X > 0){
      // Upper triangular matrix of X_transposed.
      var X_transposed_upper_tri_dsd = @set_dsd_length(X_transposed_base_dsd, PE_X0*BRICK_WAVELETS);
      var X_upper_tri_dsd            = @set_dsd_length(X_base_dsd, PE_X0*BRICK_WAVELETS);
      @fmovs(X_upper_tri_dsd, X_transposed_upper_tri_dsd);
    }
    if (PE_X < WIDTHm1){
      // Lower triangular matrix of X_transposed
      var X_transposed_lower_tri_dsd = @set_dsd_length(X_transposed_base_dsd, (REV_PE_X*BRICK_WAVELETS) );
      X_transposed_lower_tri_dsd     = @increment_dsd_offset(X_transposed_lower_tri_dsd, ( (PE_X+1)*BRICK_WAVELETS), f32); // Write after PEth brick

      var X_lower_tri_dsd            = @set_dsd_length(X_base_dsd, (REV_PE_X*BRICK_WAVELETS) );
      X_lower_tri_dsd                = @increment_dsd_offset(X_lower_tri_dsd, ( (PE_X+1)*BRICK_WAVELETS), f32); // Write after PEth brick
      @fmovs(X_lower_tri_dsd, X_transposed_lower_tri_dsd);
    }

    if (inv_mode) {
        f_ifft();
    } else {
        f_fft();
    }
  }
}

task f_exit() void {
    // the user must unblock cmd color for every PE
    sys_mod.unblock_cmd_stream();
}


comptime {
  @block(LR_color);
  @block(RL_color);

  @bind_local_task(f_exit, EXIT);
  @bind_local_task(transposeLR, transposeLR_task_id);
  @bind_local_task(transposeRL, transposeRL_task_id);
  @bind_local_task(sentinelLR, sentinelLR_task_id);
  @bind_local_task(sentinelRL, sentinelRL_task_id);
  @bind_local_task(sync, sync_task_id);

  if (PE_X == 0) {
     @set_local_color_config(LR_color, .{
                             .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST }, .pop_mode = .{.always_pop = true} },
                             .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = 0, .count_data = true, .count_control = false, .fast_mode = true}
                            });
     @set_local_color_config(RL_color, .{
                             .routes = .{ .rx = .{ EAST }, .tx = .{ RAMP }, .pop_mode = .{.always_pop = true} },
                             .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = 0, .count_data = true, .count_control = false, .fast_mode = true}
                            });

  } else if (PE_X == WIDTHm1) { //LAST PE
    @set_local_color_config(LR_color, .{
                            .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }, .pop_mode = .{.always_pop = true} },
                            .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = BRICK_WAVELETS, .count_data = true, .count_control = false, .fast_mode = true}
                          });
    @set_local_color_config(RL_color, .{
                            .routes = .{ .rx = .{ RAMP }, .tx = .{ WEST }, .pop_mode = .{.always_pop = true} },
                            .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = 0, .count_data = true, .count_control = false, .fast_mode = true}
                          });

  } else { // PEs in the MIDDLE
    if (PE_X == 1) {
      @set_local_color_config(LR_color, .{
                              .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP, EAST }, .pop_mode = .{.always_pop = true} },
                              .switches = .{ .pos1 = .{ .tx = EAST }, .pos2 = .{ .rx = RAMP } },
                              .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = 0, .count_data = true, .count_control = false, .fast_mode = true}
                            });
    } else {
      @set_local_color_config(LR_color, .{
                              .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP, EAST }, .pop_mode = .{.always_pop = true} },
                              .switches = .{ .pos1 = .{ .tx = EAST }, .pos2 = .{ .rx = RAMP } },
                              .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = (DEPTH-PE_X)*BRICK_WAVELETS, .count_data = true, .count_control = false, .fast_mode = true}
                            });
    }

    @set_local_color_config(RL_color, .{
                            .routes = .{ .rx = .{ EAST }, .tx = .{ RAMP, WEST }, .pop_mode = .{.always_pop = true} },
                            .switches = .{ .pos1 = .{ .tx = WEST }, .pos2 = .{ .rx = RAMP } },
                            .filter = .{ .kind = .{.counter = true}, .limit1 =TRANS_LEN-1, .max_counter =BRICK_WAVELETS-1, .init_counter = (DEPTH-(PE_X+1))*BRICK_WAVELETS, .count_data = true, .count_control = false, .fast_mode = true}
                          });
  }


  @export_symbol(ptr_X, "X");
  @export_symbol(ptr_f, "f");
  @export_symbol(f_fft);
  @export_symbol(f_ifft);
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}
