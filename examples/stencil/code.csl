param timeSteps;      // iteration count
param ghostCells;

// problem size
param problemWidth;
param problemHeight;
param problemDepth;

// rectangle size
param computeWidth;
param computeHeight;

fn isTop(x: i16, y: i16) bool { return y == 0; }
fn isLeft(x: i16, y: i16) bool { return x == 0; }
fn isRight(x: i16, y: i16) bool { return x == computeWidth - 1; }
fn isBottom(x: i16, y: i16) bool { return y == computeHeight - 1; }

comptime {
  // ensure that problem size and compute size are positive integers
  @comptime_assert(computeWidth > 0 and computeHeight > 0);
  @comptime_assert(problemWidth > 0 and problemHeight > 0 and problemDepth > 0);

  // ensure that the problem size can be cleanly divided among the rectangle PEs
  @comptime_assert(problemWidth % computeWidth == 0);
  @comptime_assert(problemHeight % computeHeight == 0);

  // ensure that the ghost cell count does not exceed each PE's local data
  @comptime_assert(ghostCells <= problemWidth / computeWidth);
  @comptime_assert(ghostCells <= problemHeight / computeHeight);
  @comptime_assert(ghostCells <= problemDepth);
}

// tx to north / rx from south
const northwards0: color = @get_color(0);
const northwards1: color = @get_color(1);

// tx to south / rx from north
const southwards0: color = @get_color(2);
const southwards1: color = @get_color(3);

// tx to west / rx from east
const westwards0: color = @get_color(4);
const westwards1: color = @get_color(5);

// tx to east / rx from west
const eastwards0: color = @get_color(6);
const eastwards1: color = @get_color(7);

const term: color = @get_color(8);
const compute: color = @get_color(9);
const exchange: color = @get_color(10);

const tally_c1: color = @get_color(11);
const tally_c2: color = @get_color(12);
const tally_c3: color = @get_color(13);

const txWestComplete: color = @get_color(15);
const txEastComplete: color = @get_color(16);
const txNorthComplete: color = @get_color(17);
const txSouthComplete: color = @get_color(18);

const rxWestComplete: color = @get_color(19);
const rxEastComplete: color = @get_color(20);
const rxNorthComplete: color = @get_color(21);
const rxSouthComplete: color = @get_color(22);

const tally = @import_module("<kernels/tally/layout>", .{
  .kernel_height=computeHeight,
  .kernel_width=computeWidth,
  .phase2_tally=0,
  .colors=[3]color{tally_c1, tally_c2, tally_c3},
  .output_color=term,
});

layout {
  @set_rectangle(computeWidth, computeHeight);

  const baseParams = .{
    .timeSteps = timeSteps,
    .ghostCells = ghostCells,

    .colorExch = exchange,
    .colorCompute = compute,

    .hPeCount = computeWidth,
    .vPeCount = computeHeight,

    .dataWidth = problemWidth / computeWidth,     // x-dim
    .dataHeight = problemHeight / computeHeight,  // y-dim
    .dataDepth = problemDepth,                    // z-dim

    .colorTxWestComplete = txWestComplete,
    .colorTxEastComplete = txEastComplete,
    .colorTxNorthComplete = txNorthComplete,
    .colorTxSouthComplete = txSouthComplete,

    .colorRxWestComplete = rxWestComplete,
    .colorRxEastComplete = rxEastComplete,
    .colorRxNorthComplete = rxNorthComplete,
    .colorRxSouthComplete = rxSouthComplete,
  };

  for (@range(i32, computeWidth)) |x| {
    for (@range(i32, computeHeight)) |y| {
      var colorParams: comptime_struct = .{};

      if (y % 2 == 0) {
        colorParams = @concat_structs(colorParams, .{
          .colorTxToNorth = northwards1,
          .colorRxFromNorth = southwards0,

          .colorTxToSouth = southwards1,
          .colorRxFromSouth = northwards0,
        });
      } else {
        colorParams = @concat_structs(colorParams, .{
          .colorTxToNorth = northwards0,
          .colorRxFromNorth = southwards1,

          .colorTxToSouth = southwards0,
          .colorRxFromSouth = northwards1,
        });
      }

      if (x % 2 == 0) {
        colorParams = @concat_structs(colorParams, .{
          .colorTxToWest = westwards1,
          .colorRxFromWest = eastwards0,

          .colorTxToEast = eastwards1,
          .colorRxFromEast = westwards0,
        });
      } else {
        colorParams = @concat_structs(colorParams, .{
          .colorTxToWest = westwards0,
          .colorRxFromWest = eastwards1,

          .colorTxToEast = eastwards0,
          .colorRxFromEast = westwards1,
        });
      }

      const borderParams = .{
        .isOnNorthBoundary = isTop(x, y),
        .isOnWestBoundary = isLeft(x, y),
        .isOnEastBoundary = isRight(x, y),
        .isOnSouthBoundary = isBottom(x, y),
      };

      const tallyParams = tally.get_params(x, y);
      const peParams =
        @concat_structs(baseParams,
        @concat_structs(.{ .tallyParams = tallyParams },
        @concat_structs(borderParams, colorParams)));
      @set_tile_code(x, y, "task.csl", peParams);
    }
  }
}
