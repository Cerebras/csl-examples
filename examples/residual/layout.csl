// This example computes |b-A*x|_inf on a 2-by-2 rectangle which has P0.0, P0.1, P1.0 and P1.1
// The matrix A is distributed via set_symbol_rect at initialization time
// The vector x is transferred from the north of the rectangle
// The vector b is transferred from the west of the rectangle
// the result |b-A*x| is transferred to the east of P1.0
//
// Each PE receives the vector x and computes A*x locally, then performs a row reduction to finish y = b - A*x
// The last column contains the vector y, and performs a column reduction to obtain |b-A*x|
//
// internal color PSUM is used in row reduction
// internal color NRM is used in column reduction

// global routing colors
const FABRIC_X: color = @get_color(0) ;  // input vector x
const FABRIC_B: color = @get_color(1) ;  // input vector b
const TXACT: color    = @get_color(2) ;  // output scalar |b-A*x|
const PSUM: color     = @get_color(3) ;  // row reduction
const NRM: color      = @get_color(4) ;  // column reduction

// local tasks
const STARTUP: color  = @get_color(6) ;
const COMP: color     = @get_color(7) ;
const REDUCE: color   = @get_color(8) ;
const DONE: color     = @get_color(9) ;

// neither routing color nor local task
const NONE: color     = @get_color(11) ; // NONE is don't care (neither routing color nor entrypoint)
                             // the compiler emits an error for un-initialized colors or parameters
                             // binding a non-routing local color to NONE to avoid the compilation error

// (LOCAL_OUT_SZ, LOCAL_IN_SZ) is the dimension of local tensor
//    A is LOCAL_OUT_SZ-by-LOCAL_IN_SZ
//    x is LOCAL_IN_SZ-by-1
//    y is LOCAL_OUT_SZ-by-1
//
// The unit test sets up the parameters LOCAL_OUT_SZ and LOCAL_IN_SZ via cslc
//    LOCAL_OUT_SZ = M / height
//    LOCAL_IN_SZ  = N / width
// where M, N are dimensions of global tensors A_global, x_global and y_global
//    A_global is M-by-N
//    x_global is N-by-1
//    y_global is M-by-1
param LOCAL_OUT_SZ : i16;
param LOCAL_IN_SZ  : i16;


layout{

    // step 1: configure the rectangle which does not include halo
    @set_rectangle( 2, 2 );

    // step 2: compile csl code for a set of PEx.y and generate out_x_y.elf
    //   format: @set_tile_code(x, y, code.csl, param_binding);

    @set_tile_code(0, 0, "residual.csl", .{ .RXACT_X = FABRIC_X, .RXACT_Y = FABRIC_B , .RXACT_NRM = NONE , .TXACT_Y = PSUM, .TXACT_NRM = NONE,  .STARTUP=STARTUP, .COMP=COMP, .REDUCE=REDUCE, .DONE=DONE, ._px=0, ._py=0, .LOCAL_OUT_SZ=LOCAL_OUT_SZ, .LOCAL_IN_SZ=LOCAL_IN_SZ } );
    @set_tile_code(0, 1, "residual.csl", .{ .RXACT_X = FABRIC_X, .RXACT_Y = FABRIC_B , .RXACT_NRM = NONE , .TXACT_Y = PSUM, .TXACT_NRM = NONE,  .STARTUP=STARTUP, .COMP=COMP, .REDUCE=REDUCE, .DONE=DONE, ._px=0, ._py=1, .LOCAL_OUT_SZ=LOCAL_OUT_SZ, .LOCAL_IN_SZ=LOCAL_IN_SZ } );

    @set_tile_code(1, 0, "residual.csl", .{ .RXACT_X = FABRIC_X, .RXACT_Y = PSUM , .RXACT_NRM = NRM , .TXACT_Y = NONE, .TXACT_NRM = TXACT,  .STARTUP=STARTUP, .COMP=COMP, .REDUCE=REDUCE, .DONE=DONE, ._px=1, ._py=0, .LOCAL_OUT_SZ=LOCAL_OUT_SZ, .LOCAL_IN_SZ=LOCAL_IN_SZ } );
    @set_tile_code(1, 1, "residual.csl", .{ .RXACT_X = FABRIC_X, .RXACT_Y = PSUM , .RXACT_NRM = NONE, .TXACT_Y = NONE, .TXACT_NRM = NRM,    .STARTUP=STARTUP, .COMP=COMP, .REDUCE=REDUCE, .DONE=DONE, ._px=1, ._py=1, .LOCAL_OUT_SZ=LOCAL_OUT_SZ, .LOCAL_IN_SZ=LOCAL_IN_SZ } );

    // step 3: global and internal routing
    //  format: @set_color_config(x, y, color, route);

    // routing of FABRIC_X
    // - cliff distribution of x along columns
    // - broadcast from the north to the south
    @set_color_config(0, 0, FABRIC_X, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP, SOUTH} } });
    @set_color_config(0, 1, FABRIC_X, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });

    @set_color_config(1, 0, FABRIC_X, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP, SOUTH} } });
    @set_color_config(1, 1, FABRIC_X, .{ .routes = .{ .rx = .{NORTH}, .tx = .{RAMP} } });

    // routing of FABRIC_B
    // - cliff distribution along rows
    // - only column 0 (P0.y) receives the data from the west
    @set_color_config(0, 0, FABRIC_B, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });
    @set_color_config(0, 1, FABRIC_B, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });

    // routing of PSUM (for row reduction)
    // P0.0, P0.1: send partial sum
    // P1.0, P1.1: receive partial sum
    @set_color_config(0, 0, PSUM, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST} } });
    @set_color_config(0, 1, PSUM, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST} } });
    @set_color_config(1, 0, PSUM, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });
    @set_color_config(1, 1, PSUM, .{ .routes = .{ .rx = .{WEST}, .tx = .{RAMP} } });

    // routing of TXACT
    // P1.0 sends out |b-A*x|
    @set_color_config(1, 0, TXACT, .{ .routes = .{ .rx = .{RAMP}, .tx = .{EAST} } });

    // routing of NRM (for column reduction)
    // P1.0: receive local nrm from P1.1
    // P1.1: send local nrm to P1.0
    @set_color_config(1, 0, NRM, .{ .routes = .{ .rx = .{SOUTH}, .tx = .{RAMP} } });
    @set_color_config(1, 1, NRM, .{ .routes = .{ .rx = .{RAMP}, .tx = .{NORTH} } });

} // end of layout
