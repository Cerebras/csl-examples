// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param HIST_WIDTH:i16;

param INPUT_SIZE:u32;
param N_BUCKETS:u32;
param BUCKET_SIZE:u32;

param tally_params:comptime_struct;

const START: color = @get_color(24);
const SENDER_NS: color = @get_color(25);
const SENDER_WE: color = @get_color(26);

param recv_we: color;
param send_we: color;

param recv_ns: color;
param send_ns: color;

// inputs, PE_X, and PE_Y are all expected to be initialized late via elf file
// overlay.
var inputs:[INPUT_SIZE]u32 = @zeros([INPUT_SIZE]u32);
var PE_X:u32 = 0;
var PE_Y:u32 = 0;

var buckets:[N_BUCKETS]u32 = @zeros([N_BUCKETS]u32);

var stage_ns = @zeros([1]u32);
var stage_ew = @zeros([1]u32);
var stage_input = @zeros([1]u32);
const ns_mdsd  = @get_dsd(mem1d_dsd, .{.tensor_access=|i|{1}->stage_ns[i]});
const ew_mdsd  = @get_dsd(mem1d_dsd, .{.tensor_access=|i|{1}->stage_ew[i]});
const stage_mdsd  = @get_dsd(
    mem1d_dsd, .{.tensor_access=|i|{1}->stage_input[i]});

const ns_dsd_inputs = @get_dsd(fabout_dsd, .{.fabric_color=send_ns, .extent=1, .output_queue = 0});
const ns_dsd_sender = @get_dsd(fabout_dsd, .{.fabric_color=send_ns, .extent=1, .output_queue = 1});
const ew_dsd_inputs = @get_dsd(fabout_dsd, .{.fabric_color=send_we, .extent=1, .output_queue = 2});
const ew_dsd_sender = @get_dsd(fabout_dsd, .{.fabric_color=send_we, .extent=1, .output_queue = 3});

// minimum FIFO_SIZE is 2
const FIFO_BITS : u16 = 11;
const FIFO_SIZE : i16 = @as(i16, (@as(i16, 1) << FIFO_BITS));
const FIFO_MASK : i16 = FIFO_SIZE - 1;

var fifo_ns : [FIFO_SIZE]u32 = @zeros([FIFO_SIZE]u32);
var fifo_ns_head : i16 = 0;
var fifo_ns_tail : i16 = 0;

var fifo_we : [FIFO_SIZE]u32 = @zeros([FIFO_SIZE]u32);
var fifo_we_head : i16 = 0;
var fifo_we_tail : i16 = 0;

task sender_ns() void {
  if (fifo_ns_tail == fifo_ns_head) {
    @block(SENDER_NS);
    @activate(SENDER_NS);
    return;
  }
  stage_ns[0] = fifo_ns[fifo_ns_head];
  fifo_ns_head = (fifo_ns_head + 1) & FIFO_MASK;
  @unblock(recv_ns);
  @mov32(ns_dsd_sender, ns_mdsd, .{.async=true, .activate=sender_ns});
}

task sender_we() void {
  if (fifo_we_tail == fifo_we_head) {
    @block(SENDER_WE);
    @activate(SENDER_WE);
    return;
  }
  stage_ew[0] = fifo_we[fifo_we_head];
  fifo_we_head = (fifo_we_head + 1) & FIFO_MASK;
  @unblock(recv_we);
  @mov32(ew_dsd_sender, ew_mdsd, .{.async=true, .activate=sender_we});
}

// rx on N/S
task handle_NS(wavelety:u32) void {
  var y = wavelety >> 22;
  if (y != PE_Y) {
    // Copy the wavelet to fifo_ns. The fifo is assumed to have space.
    fifo_ns[fifo_ns_tail] = wavelety;
    fifo_ns_tail = (fifo_ns_tail + 1) & FIFO_MASK;
    @unblock(SENDER_NS);
    if (((FIFO_SIZE + fifo_ns_tail - fifo_ns_head) & FIFO_MASK) == FIFO_SIZE - 1) {
      @block(recv_ns);
    }
    return;
  }

  // reached desired Y position. Repack and send on X now.
  var waveletx = repack_wavelet_hop_horizontal(wavelety);
  var x = waveletx >> 22;
  if (x != PE_X) {
    // Copy the wavelet to fifo_we. The fifo is assumed to have space.
    fifo_we[fifo_we_tail] = waveletx;
    fifo_we_tail = (fifo_we_tail + 1) & FIFO_MASK;
    @unblock(SENDER_WE);
    if (((FIFO_SIZE + fifo_we_tail - fifo_we_head) & FIFO_MASK) == FIFO_SIZE - 1) {
      @block(recv_we);
    }
    return;

  }

  keep(waveletx);
}

// rx on E/W
task handle_WE(waveletx:u32) void {
  var x = waveletx >> 22;
  if (x != PE_X) {
    // Copy the wavelet to fifo_we. The fifo is assumed to have space.
    fifo_we[fifo_we_tail] = waveletx;
    fifo_we_tail = (fifo_we_tail + 1) & FIFO_MASK;
    @unblock(SENDER_WE);
    if (((FIFO_SIZE + fifo_we_tail - fifo_we_head) & FIFO_MASK) == FIFO_SIZE - 1) {
      @block(recv_we);
    }
    return;
  }

  // can keep the wavelet in the bucket
  keep(waveletx);
}

// Turns a raw wavelet into a first hop packed wavelet. This looks like:
// |---10(y)---|---10(x)---|----12(bucket)----|
// PEs only need to look at the y-coordinate before re-packing for second hop.
fn pack_wavelet_hop_vertical(x:u32, y:u32, bucket_id:u32) u32 {
  return (y << 22) | (x << 12) | bucket_id;
}

// Turns a wavelet packed for a first (vertical) hop route into a wavelet packed
// for the second hop. This looks like:
// |---10(x)---|-----10----|----12(bucket)----|
// PEs only need to look at the x-coordinate, and if matches then the bucket.
fn repack_wavelet_hop_horizontal(wavelety:u32) u32 {
  var bucket:u32 = (wavelety << 20) >> 20;
  var x = (wavelety << 10) >> 22;
  var waveletx = (x << 22) | bucket;
  return waveletx;
}

const tally = @import_module("<kernels/tally/pe>",
  @concat_structs(tally_params, .{
    .output_queues=[2]u16{4, 5}, // we use 0-3 above
  }));

fn keep(waveletx:u32) void {
  var bucket:u32 = (waveletx << 20) >> 20;
  buckets[bucket] += 1;
  tally.bump_tally(1);
}

var i:u32 = 0;
task process_inputs() void {
  var value = inputs[i];
  var _r1 = value / BUCKET_SIZE;
  var bucket_id = _r1 % N_BUCKETS; // this is 12 bits i.e. up to 4096
  var _r2 = _r1 / N_BUCKETS;
  var pe_x = _r2 % @as(u32, HIST_WIDTH); // this can be up to 1024 i.e.
  var pe_y = _r2 / @as(u32, HIST_WIDTH); // this can take up to 10 bits
  var wavelety = pack_wavelet_hop_vertical(pe_x, pe_y, bucket_id);

  // re-activate the input processing task if needed
  i += 1;
  if (i < INPUT_SIZE) {
    @activate(START);
  } else {
    tally.signal_completion();
  }

  // block myself
  @block(START);

  if (pe_y != PE_Y) {
    stage_input[0] = wavelety;
    @mov32(ns_dsd_inputs, stage_mdsd, .{.async=true, .unblock=process_inputs});
    return;
  }

  var waveletx = repack_wavelet_hop_horizontal(wavelety);
  if (pe_x != PE_X) {
    stage_input[0] = waveletx;
    @mov32(ew_dsd_inputs, stage_mdsd, .{.async=true, .unblock=process_inputs});
    return;
  }

  @unblock(START);
  keep(waveletx);
}

comptime {
  @bind_task(process_inputs, START);
  @activate(START);

  @bind_task(sender_ns, SENDER_NS);
  @block(SENDER_NS);
  @activate(SENDER_NS);

  @bind_task(sender_we, SENDER_WE);
  @block(SENDER_WE);
  @activate(SENDER_WE);

  // Receive task NS
  @bind_task(handle_NS, recv_ns);

  // Receive task WE
  @bind_task(handle_WE, recv_we);
}
