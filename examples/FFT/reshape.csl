// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


param SRC_SIZE: u16;
param DST_SIZE: u16;
param N: u16;
param FP: i16;
param tensor_type: type;
param dest: *[DST_SIZE]tensor_type;
param src: *[SRC_SIZE]tensor_type;

const srcDSD = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> src[i] });
const destDSD = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> dest[i] });

fn reshape(baseA: *u16, baseB: *u16, subproblems: u16, stride: u16) void {

  var sourceDSD = @increment_dsd_offset(srcDSD, @as(i16, baseB.*), tensor_type);
  sourceDSD = @set_dsd_length(sourceDSD, subproblems);

  var destinationDSD = @increment_dsd_offset(destDSD, @as(i16, baseA.*), tensor_type);
  destinationDSD = @set_dsd_length(destinationDSD, subproblems);

  while ((baseB.*) < N) {
    if (FP==1){
      @fmovh(destinationDSD, sourceDSD);
    } else {
      @fmovs(destinationDSD, sourceDSD);
    }
      destinationDSD = @increment_dsd_offset(destinationDSD, @as(i16, subproblems), tensor_type);
      sourceDSD = @increment_dsd_offset(sourceDSD, @as(i16, stride), tensor_type);
      (baseA.*) += subproblems;
      (baseB.*) += stride;
  }
}
