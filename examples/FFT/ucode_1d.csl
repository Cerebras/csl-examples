const main_color: color = @get_color(0);
param output_color: color;

// Problem size
param N: i16;
const ELEM_SIZE: i16 = 2;
param FP: i16;
param tensor_type: type;

// Import the code in the file `fft.csl` as the module `mod`, and
// instantiate the module's `N` parameter.


var X = @zeros([N*ELEM_SIZE]tensor_type);
var f = @zeros([N]tensor_type);

const mod = @import_module("fft.csl", .{ .N = N, .ARRAY_LEN = N*ELEM_SIZE, .X=&X, .FP=FP, .tensor_type=tensor_type});

task main_task() void {
  mod.fft(&f);

  const outDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = output_color,
  });

  // Signal completion to host
  @mov16(outDsd, 0);
}

comptime {
  @activate(main_color);
  @bind_task(main_task, main_color);
  @set_local_color_config(output_color, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ WEST } } });
}
