param DIM: i16;  // FFT dimension: 1 == 1D, 2 == 2D
param Nz: i16;   // Input vector size
param FP: i16;   // Precision: 1 == float16, 2 == float32

param output_color: color;

comptime {
  // Verify validity of parameters
  @comptime_assert(DIM == 1 or DIM == 2); // only 1D and 2D supported
  @comptime_assert((DIM == 1 and Nz >= 2) or (DIM == 2 and Nz >= 4));
  @comptime_assert(Nz & (Nz-1) == 0); // Nz must be a power of 2
  @comptime_assert(FP == 1 or FP == 2);
  @comptime_assert(FP == 1 or DIM == 1); // DIM == 2 does not support FP2
}

layout {
  // Set derived configuration parameters
  var WIDTH: i16 = 1;
  var Nx = WIDTH;
  if (DIM == 2) {
    WIDTH = Nz;
    Nx = WIDTH;
  }
  const HEIGHT = 1;
  const Ny = HEIGHT;

  var tensor_type: type = f16;
  if (FP==2){
    tensor_type = f32;
  }

  @set_rectangle(WIDTH, HEIGHT);

  if (WIDTH > 1) {
    // A row of PEs for 2D FFT
    var idx :i16 = 0;
    var idx0 :i16 = 0;
    var idxW :i16 = 0;
    for (@zeros([WIDTH]u8)) |_, i| {
        idx = i;
        idx0 = i;
        idxW = i;
        if (idx == 0) {
          idx0 = 1;
        }
        if (idx == WIDTH-1) {
          idxW = 1;
        }
        @set_tile_code(idx, 0, "ucode_2d.csl",.{.output_color=output_color, .Nz=Nz, .Nx=Nx, .Ny=Ny, .HEIGHT=HEIGHT, .WIDTH=WIDTH, .FP=FP, .tensor_type=tensor_type, .PE_X=idx, .PE_X0=idx0, .PE_XW=idxW});
      }
  } else {
    // Single Tile for 1D FFT
    @set_tile_code(0, 0, "ucode_1d.csl",.{.output_color=output_color,.N=Nz, .FP=FP, .tensor_type=tensor_type});
  }
}
