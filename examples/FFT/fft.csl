
// Problem size
param N: u16;
param FP: i16;
param tensor_type: type;
param ARRAY_LEN: u16;
param X: *[ARRAY_LEN]tensor_type;

const N_signed: i16 = @as(i16, N);
var Xaux = @zeros([N]tensor_type);

const reshape_x   = @import_module("reshape.csl", .{ .N=N, .FP=FP, .tensor_type=tensor_type, .SRC_SIZE = ARRAY_LEN, .DST_SIZE = ARRAY_LEN, .src=X, .dest=X });
const reshape_aux = @import_module("reshape.csl", .{ .N=N, .FP=FP, .tensor_type=tensor_type, .SRC_SIZE = N,         .DST_SIZE = ARRAY_LEN, .src=&Xaux, .dest=X});

// DSD to move data from the upper part of X, and the auxiliary array of size half of the size of X
// Bear in mind that X is size 2*N, so X_even_dsd is just accessing the lower part of X
const Xaux_dsd   = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> Xaux[i] });
const Xaux_stride2_dsd   = @set_dsd_stride(Xaux_dsd, 2);

const X_odd_dsd  = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> X[i+N_signed] });
const X_even_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> X[i] });

fn fft(f: *[N]tensor_type) void {
  var subproblems = N;
  while (subproblems > 1) {

    var stride = subproblems;
    subproblems >>= 1;

    var sourceDSD = @set_dsd_base_addr(Xaux_dsd, X);
    sourceDSD = @increment_dsd_offset(sourceDSD, N_signed, tensor_type);
    sourceDSD = @set_dsd_length(sourceDSD, stride);

    var resultDSD = @set_dsd_length(Xaux_dsd, stride);

    var imag_srcDSD = @set_dsd_base_addr(Xaux_stride2_dsd, X);
    imag_srcDSD = @increment_dsd_offset(imag_srcDSD, @as(i16, N + 1), tensor_type);
    imag_srcDSD = @set_dsd_length(imag_srcDSD, subproblems);

    var real_dstDSD = @set_dsd_length(Xaux_stride2_dsd, subproblems);

    var real_srcDSD = @set_dsd_base_addr(Xaux_stride2_dsd, X);
    real_srcDSD = @increment_dsd_offset(real_srcDSD, N_signed, tensor_type);
    real_srcDSD = @set_dsd_length(real_srcDSD, subproblems);

    var imag_dstDSD = @set_dsd_length(Xaux_stride2_dsd, subproblems);
    imag_dstDSD = @increment_dsd_offset(imag_dstDSD, @as(i16, 1), tensor_type);

    var offset:u16 = 0;
    while (offset < N) : (offset += stride) {

      var c1a:tensor_type = @as(tensor_type, 0.0);
      var c1b:tensor_type = @as(tensor_type, 0.0);
      c1a = (f.*)[offset];
      c1b = (f.*)[offset+1];

      if (FP==1){
        /// Twiddling Factors application to the ODD part of the array (second half)
        /// Complex number multiplication broken down into Real Add and Mul.
        @fmulh(resultDSD, sourceDSD, c1a);
        /// Calculate the Real part of the complex multiplication.
        @fmach(real_dstDSD, real_dstDSD, imag_srcDSD, c1b);
        // Calculate the Imaginary part of the complex multiplication.
        @fmach(imag_dstDSD, imag_dstDSD, real_srcDSD, -c1b);
      } else {
        @fmuls(resultDSD, sourceDSD, c1a);
        @fmacs(real_dstDSD, real_dstDSD, imag_srcDSD, c1b);
        @fmacs(imag_dstDSD, imag_dstDSD, real_srcDSD, -c1b);
      }

      sourceDSD = @increment_dsd_offset(sourceDSD, @as(i16, stride), tensor_type);
      resultDSD = @increment_dsd_offset(resultDSD, @as(i16, stride), tensor_type);
      imag_srcDSD = @increment_dsd_offset(imag_srcDSD, @as(i16, stride), tensor_type);
      real_dstDSD = @increment_dsd_offset(real_dstDSD, @as(i16, stride), tensor_type);
      real_srcDSD = @increment_dsd_offset(real_srcDSD, @as(i16, stride), tensor_type);
      imag_dstDSD = @increment_dsd_offset(imag_dstDSD, @as(i16, stride), tensor_type);
    }

    /////////// APPLY EVEN/ODD ///////////
    if (FP==1){
      @fsubh(X_odd_dsd, X_even_dsd, Xaux_dsd);
      @faddh(X_even_dsd, X_even_dsd, Xaux_dsd);
    } else {
      @fsubs(X_odd_dsd, X_even_dsd, Xaux_dsd);
      @fadds(X_even_dsd, X_even_dsd, Xaux_dsd);
    }

    if (subproblems > 1) {
        // This move could be saved by swapping pointers between XN and Xaux as in CASM
        if (FP==1){
          @fmovh(Xaux_dsd, X_odd_dsd);
        } else {
          @fmovs(Xaux_dsd, X_odd_dsd);
        }

        // Fill Right part of the array
        var baseA:u16 = N;
        var baseB:u16 = subproblems;
        reshape_x.reshape(&baseA, &baseB, subproblems, stride);
        baseB = subproblems;
        reshape_aux.reshape(&baseA, &baseB, subproblems, stride);

        // Fill Left part of the array
        baseA = 0;baseB = 0;
        reshape_x.reshape(&baseA, &baseB, subproblems, stride);
        baseB = 0;
        reshape_aux.reshape(&baseA, &baseB, subproblems, stride);

    } // end if

  } // end while subproblems
}
