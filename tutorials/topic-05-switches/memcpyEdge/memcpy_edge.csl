// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// This is a template of memcpy over the edges.
// memcpy_edge.csl can be "north", "south", "west" or "east"
// of the following layout.
//        +---------+
//        |  north  |
// +------+---------+------+
// | west |  core   | east |
// +------+---------+------+
//        |  south  |
//        +---------+
// north.csl, south.csl, west.csl and east.csl instantiate
// memcpy_edge.csl with a proper direction.
//
// memcpy_edge.csl supports 2 streaming H2Ds and one
// streaming D2H. Such constraint depends on the design.
// The current implementation binds a FIFO for a H2D or D2H,
// so we can only support 3 in total.
// We choose 2 H2Ds and 1 D2H.
// if we replace FIFO by WTT, we could support more.
//
// However the user can instantiate memcpy_edge.csl for each
// edge. The maximum number of H2Ds is 2*4 = 8 and maximum
// number of D2Hs is 1*4 = 4.
//
// If the user only has a H2D at north, for example, he only
// needs to configure color USER_IN_1, i.e. only a single
// streaming H2D is used.
//
// For example,
//   @set_tile_code(pe_x, 0, "north.csl", .{
//      .USER_IN_1 = mainColor,
//      .STARTUP = STARTUP,
//      .memcpy_params = memcpy_params,
//      .MEMCPYH2D_DATA_1 = MEMCPYH2D_DATA_1,
//      .MEMCPYD2H_DATA_1 = MEMCPYD2H_DATA_1
//    });

// send data to the "core"
param USER_IN_1: color = @get_color(32);
param USER_IN_2: color = @get_color(32);

// receive data from the "core"
param USER_OUT_1: color = @get_color(32);

// entrypoint
param STARTUP: local_task_id;

// ----------
// Every PE needs to import memcpy module otherwise the I/O cannot
// propagate the data to the destination.

param memcpy_params: comptime_struct;

// The direction of "core", for example
// north.csl has dir = SOUTH
// south.csl has dir = NORTH
// west.csl has dir = EAST
// east.csl has dir = WEST
param dir: direction;

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);
// ----------

const h2d_mod = @import_module("h2d.csl", .{
     .USER_IN_1 = USER_IN_1,
     .USER_IN_2 = USER_IN_2,
     .MEMCPYH2D_1 = memcpy_params.MEMCPYH2D_1,
     .MEMCPYH2D_2 = memcpy_params.MEMCPYH2D_2,
     .txdir = dir
      });

const d2h_mod = @import_module("d2h.csl", .{
     .USER_OUT_1 = USER_OUT_1,
     .MEMCPYD2H_1 = memcpy_params.MEMCPYD2H_1,
     .rxdir = dir
      });

task f_startup() void {
    h2d_mod.f_startup();
    d2h_mod.f_startup();
}

comptime {
    @bind_local_task(f_startup, STARTUP);
    @activate(STARTUP);
}
