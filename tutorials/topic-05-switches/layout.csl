// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// color/ task ID map
//
//  ID var           ID var             ID var                ID var
//   0                9 STARTUP         18                    27 reserved (memcpy)
//   1 channel       10                 19                    28 reserved (memcpy)
//   2 out           11                 20                    29 reserved
//   3               12                 21 reserved (memcpy)  30 reserved (memcpy)
//   4 D2H           13                 22 reserved (memcpy)  31 reserved
//   5               14                 23 reserved (memcpy)  32
//   6               15                 24                    33
//   7               16                 25                    34
//   8 main_task_id  17                 26                    35
//

//  +---------------+
//  | north (d2h)   |
//  +---------------+
//  | core (3-by-3) |
//  +---------------+
//  | south (nop)   |
//  +---------------+

param MEMCPYD2H_DATA_1_ID: i16; // ID for memcpy streaming color

const colorValue = 1; // ID of color used to transmit from send.csl

// Colors
const MEMCPYD2H_DATA_1: color = @get_color(MEMCPYD2H_DATA_1_ID);
const channel:          color = @get_color(colorValue);
const out:              color = @get_color(2);

// Task IDs
const main_task_id:    local_task_id = @get_local_task_id(8);
const STARTUP:         local_task_id = @get_local_task_id(9);
const channel_task_id: data_task_id  = @get_data_task_id(channel);

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = 3,
    .height = 5,
    .MEMCPYD2H_1 = MEMCPYD2H_DATA_1
    });

layout {
  @set_rectangle(3, 5);

  // north only runs D2H which receives data from pe_program
  // and forwards it to the host
  for (@range(i16, 3)) |pe_x| {
    const memcpy_params = memcpy.get_params(pe_x);
    @set_tile_code(pe_x, 0, "memcpyEdge/north.csl", .{
      .memcpy_params = memcpy_params,
      .USER_OUT_1 = out,
      .STARTUP = STARTUP,
    });
  }

  const memcpy_params_0 = memcpy.get_params(0);
  const memcpy_params_1 = memcpy.get_params(1);
  const memcpy_params_2 = memcpy.get_params(2);

  // The core has 3-by-3 PEs starting at row 1 where row 0 is "north".
  // The py coorindate of each PE is added by 1.

  // Out of the nine PEs, the PE in the center (PE #1,1) will send four
  // control wavelets to the PE's four adjacent neighbors.  These four
  // adjacent numbers are programmed to receive the control wavelets, whereas
  // all other PEs (i.e. the PEs at the corners of the rectangle) are
  // programmed to contain no instructions or routes.
  @set_tile_code(1, 1+1, "send.csl", .{
    .memcpy_params = memcpy_params_1,
    .txColor = channel,
    .main_task_id = main_task_id,
    .colorValue = colorValue
  });

  @set_tile_code(1, 0+1, "recv.csl", .{
    // Make this PE send the final message back to the host signaling completion
    .memcpy_params = memcpy_params_1,
    .rxColor = channel, .outColor = out,
    .rx_task_id = channel_task_id,
    .inDir = SOUTH, .fin = true
  });

  @set_tile_code(0, 1+1, "recv.csl", .{
    .memcpy_params = memcpy_params_0,
    .rxColor = channel, .outColor = out,
    .rx_task_id = channel_task_id,
    .inDir = EAST, .fin = false
  });

  @set_tile_code(2, 1+1, "recv.csl", .{
    .memcpy_params = memcpy_params_2,
    .rxColor = channel, .outColor = out,
    .rx_task_id = channel_task_id,
    .inDir = WEST, .fin = false
  });

  @set_tile_code(1, 2+1, "recv.csl", .{
    .memcpy_params = memcpy_params_1,
    .rxColor = channel, .outColor = out,
    .rx_task_id = channel_task_id,
    .inDir = NORTH, .fin = false
  });

  // south does NOP
  for (@range(i16, 3)) |pe_x| {
    const memcpy_params = memcpy.get_params(pe_x);
    @set_tile_code(pe_x, 4, "memcpyEdge/south.csl", .{
      .memcpy_params = memcpy_params,
      .STARTUP = STARTUP
    });
  }

  @set_tile_code(0, 0+1, "empty.csl", .{
    .memcpy_params = memcpy_params_0,
  });
  @set_tile_code(2, 0+1, "empty.csl", .{
    .memcpy_params = memcpy_params_2,
  });
  @set_tile_code(0, 2+1, "empty.csl", .{
    .memcpy_params = memcpy_params_0,
  });
  @set_tile_code(2, 2+1, "empty.csl", .{
    .memcpy_params = memcpy_params_2,
  });
}
