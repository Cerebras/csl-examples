// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYD2H_DATA_1: color;

param main_color: color;

// memcpy module reserves input/output queue 0
const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

var dst = @zeros([5]f16);
const src0 = [5]f16 {10.0, 20.0, 30.0, 40.0, 50.0};
const src1 = [5]f16 {11.0, 22.0, 33.0, 44.0, 55.0};

const dstDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{5} -> dst[i] });
const src0Dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{5} -> src0[i] });
const src1Dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{5} -> src1[i] });

const fabDsd = @get_dsd(fabout_dsd, .{
   .extent = 5,
   .fabric_color = MEMCPYD2H_DATA_1,
   .output_queue = @get_output_queue(1)
});

task main_task() void {
  @faddh(dstDsd, src0Dsd, src1Dsd);
  // The non-async operation may not work here because the length is 5.
  // The async operation with microthread 1 is used.
  @fmovh(fabDsd, dstDsd, .{.async=true});
}

comptime {
  @bind_task(main_task, main_color);
}

fn f_run() void {
  @activate(main_color);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
