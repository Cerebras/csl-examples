// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param memcpy_params: comptime_struct;

param peId: u16;

// Colors
param recvColor:        color;
param resultColor:      color;

// Task IDs
param recv_task_id: data_task_id; // data task receives data along recvColor

// ----------
// Every PE needs to import memcpy module otherwise the I/O cannot
// propagate the data to the destination.

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);
// ----------

/// The recipient simply halves the value in the incoming wavelet and sends the
/// result to the north neighbor (halo PE).
var buf = @zeros([1]f16);
task recvTask(data: f16) void {
  @block(recvColor);
  buf[0] = data / 2.0;
  const outDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = resultColor,
    .output_queue = @get_output_queue(1)
  });
  const bufDsd = @get_dsd(mem1d_dsd, .{
    .tensor_access = |i|{1} -> buf[i]
  });
  // WARNING: nonblock is necessary otherwise CE has no resource
  // to run memcpy kernel
  @fmovh(outDsd, bufDsd, .{.async = true, .unblock = recv_task_id});
}

comptime {
  @bind_data_task(recvTask, recv_task_id);

  const baseRoute = .{
    .rx = .{ WEST }
  };

  const filter = .{
      // Each PE should only accept three wavelets starting with the one whose
      // index field contains the value peId * 3.
      .kind = .{ .range = true },
      .min_idx = peId * 3,
      .max_idx = peId * 3 + 2,
    };

  if (peId == 3) {
    // This is the last PE, don't forward the wavelet further to the east.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  } else {
    // Otherwise, forward incoming wavelets to both CE and to the east neighbor.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP, EAST } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  }

  // Send result wavelets to the north neighbor (i.e. the halo PEs).
  @set_local_color_config(resultColor, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ NORTH } } });
}
