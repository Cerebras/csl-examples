// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// color/ task ID map
//
//  ID var           ID var            ID var                ID var
//   0                9 STARTUP        18                    27 reserved (memcpy)
//   1 dataColor     10                19                    28 reserved (memcpy)
//   2 resultColor   11                20                    29 reserved
//   3 H2D           12                21 reserved (memcpy)  30 reserved (memcpy)
//   4 D2H           13                22 reserved (memcpy)  31 reserved
//   5               14                23 reserved (memcpy)  32
//   6               15                24                    33
//   7               16                25                    34
//   8 main_task_id  17                26                    35

//  +-------------+
//  | north(d2H)  |
//  +-------------+
//  | core        |
//  +-------------+
//  | south(nop)  |
//  +-------------+

// IDs for memcpy streaming colors
param MEMCPYH2D_DATA_1_ID: i16;
param MEMCPYD2H_DATA_1_ID: i16;

// Colors
const MEMCPYH2D_DATA_1: color = @get_color(MEMCPYH2D_DATA_1_ID);
const MEMCPYD2H_DATA_1: color = @get_color(MEMCPYD2H_DATA_1_ID);
const dataColor:        color = @get_color(1);
const resultColor:      color = @get_color(2);

// Task IDs
const STARTUP:      local_task_id = @get_local_task_id(9);
const main_task_id: local_task_id = @get_local_task_id(8);
const recv_task_id: data_task_id  = @get_data_task_id(dataColor);

const memcpy = @import_module( "<memcpy/get_params>", .{
    .width = 4,
    .height = 3,
    .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
    .MEMCPYD2H_1 = MEMCPYD2H_DATA_1
    });

layout {
  @set_rectangle(4, 3);

  for (@range(i16, 4)) |pe_x| {
    const memcpy_params = memcpy.get_params(pe_x);

    // north PE only runs d2h
    @set_tile_code(pe_x, 0, "memcpyEdge/north.csl", .{
      .memcpy_params = memcpy_params,
      .USER_OUT_1 = resultColor,
      .STARTUP = STARTUP,
    });
  }

  const memcpy_params_0 = memcpy.get_params(0);
  const memcpy_params_1 = memcpy.get_params(1);
  const memcpy_params_2 = memcpy.get_params(2);
  const memcpy_params_3 = memcpy.get_params(3);

  @set_tile_code(0, 1, "send.csl", .{
    .peId = 0,
    .memcpy_params = memcpy_params_0,
    .exchColor = dataColor,
    .resultColor = resultColor,
    .main_task_id = main_task_id
  });

  const recvStruct = .{ .recvColor    = dataColor,
                        .resultColor  = resultColor,
                        .recv_task_id = recv_task_id };
  @set_tile_code(1, 1, "recv.csl", @concat_structs(recvStruct, .{
    .peId = 1,
    .memcpy_params = memcpy_params_1,
  }));
  @set_tile_code(2, 1, "recv.csl", @concat_structs(recvStruct, .{
    .peId = 2,
    .memcpy_params = memcpy_params_2,
  }));
  @set_tile_code(3, 1, "recv.csl", @concat_structs(recvStruct, .{
    .peId = 3,
    .memcpy_params = memcpy_params_3,
  }));

  for (@range(i16, 4)) |pe_x| {
    const memcpy_params = memcpy.get_params(pe_x);
    // south does nothing
    @set_tile_code(pe_x, 2, "memcpyEdge/south.csl", .{
      .memcpy_params = memcpy_params,
      .STARTUP = STARTUP
    });
  }
}
