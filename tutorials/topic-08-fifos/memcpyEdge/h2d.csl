// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Two streaming H2Ds:
// 1st H2D: UT 1 and UT 2
// 2nd H2D: UT 3 and UT 4

param MEMCPYH2D_1: color = @get_color(32);
param MEMCPYH2D_2: color = @get_color(32);

// Color along which we send a wavelet to pe_program
param USER_IN_1: color = @get_color(32);
param USER_IN_2: color = @get_color(32);

param txdir: direction;

const max_fifo_len = 256*20; // maximum length of the fifo

var fifo1_buffer = @zeros([max_fifo_len]u32);
const fifo1 = @allocate_fifo(fifo1_buffer);

var fifo2_buffer = @zeros([max_fifo_len]u32);
const fifo2 = @allocate_fifo(fifo2_buffer);

// length=inf
var fab_recv_wdsd_1 = @get_dsd(fabin_dsd, .{
   .extent = 0x7fff,
   .fabric_color = MEMCPYH2D_1,
   .input_queue = @get_input_queue(1)
});

// length=inf
var fab_trans_wdsd_1 = @get_dsd(fabout_dsd, .{
    .extent = 0x7fff,
    .fabric_color = USER_IN_1,
    .output_queue = @get_output_queue(2)
});

// length=inf
var fab_recv_wdsd_2 = @get_dsd(fabin_dsd, .{
   .extent = 0x7fff,
   .fabric_color = MEMCPYH2D_2,
   .input_queue = @get_input_queue(3)
});

// length=inf
var fab_trans_wdsd_2 = @get_dsd(fabout_dsd, .{
    .extent = 0x7fff,
    .fabric_color = USER_IN_2,
    .output_queue = @get_output_queue(4)
});

// if no user's color is defined, f_startup() is empty
fn f_startup() void {
    if ( (@get_int(MEMCPYH2D_1) < 24) and (@get_int(USER_IN_1) < 24) ){
        // receive data from streaming H2D
        @mov32(fifo1, fab_recv_wdsd_1, .{.async=true} );

        // forward data to USER_IN_1
        @mov32(fab_trans_wdsd_1, fifo1, .{.async=true} );
    }

    if ( (@get_int(MEMCPYH2D_2) < 24) and (@get_int(USER_IN_2) < 24) ){
        // receive data from streaming H2D
        @mov32(fifo2, fab_recv_wdsd_2, .{.async=true} );

        // forward data to USER_IN_1
        @mov32(fab_trans_wdsd_2, fifo2, .{.async=true} );
    }
}

comptime {
    if (@get_int(USER_IN_1) < 24){
        const h2d_route = .{ .rx = .{ RAMP }, .tx = .{ txdir } };
        @set_local_color_config(USER_IN_1, .{ .routes = h2d_route });
    }
    if (@get_int(USER_IN_2) < 24){
        const h2d_route = .{ .rx = .{ RAMP }, .tx = .{ txdir } };
        @set_local_color_config(USER_IN_2, .{ .routes = h2d_route });
    }
}
