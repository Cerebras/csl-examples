// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Color map
//
//  ID var   ID var  ID var                ID var
//   0 comm   9      18                    27 reserved (memcpy)
//   1       10      19                    28 reserved (memcpy)
//   2       11      20                    29 reserved
//   3       12      21 reserved (memcpy)  30 reserved (memcpy)
//   4       13      22 reserved (memcpy)  31 reserved
//   5       14      23 reserved (memcpy)  32
//   6       15      24                    33
//   7       16      25                    34
//   8       17      26                    35

// See task maps in sender.csl and receiver.csl

param width: u16;     // number of PEs in kernel
param num_elems: u16; // number of elements in each PE's buf

// Colors
const comm: color = @get_color(0);

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = width,
  .height = 1,
});

layout {
  @set_rectangle(width, 1);

  // Sender
  @set_tile_code(0, 0, "sender.csl", .{
    .memcpy_params = memcpy.get_params(0),
    .comm = comm, .num_elems = num_elems
  });

  @set_color_config(0, 0, comm, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST }}});

  // Receivers
  for (@range(u16, 1, width, 1)) |pe_x| {

    @set_tile_code(pe_x, 0, "receiver.csl", .{
      .memcpy_params = memcpy.get_params(pe_x),
      .comm = comm, .num_elems = num_elems
    });

    if (pe_x == width - 1) {
      @set_color_config(pe_x, 0, comm, .{ .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }}});
    } else {
      @set_color_config(pe_x, 0, comm, .{ .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP, EAST }}});
    }
  }

  // export symbol name
  @export_name("buf", [*]u32, true);
  @export_name("main_fn", fn()void);
}
