// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is layout.csl

param memcpy_params: comptime_struct;

// Task IDs
param main_task_id: local_task_id;

const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);

const dsd = @get_dsd(fabout_dsd, .{
   .extent = 1,
   .fabric_color = sys_mod.MEMCPYD2H_1
});


fn incrementAndSum(dataPtr: *[3]i16, resultPtr: *i16) void {
  // Write an updated value to each element of the array
  (dataPtr.*)[0] += 1;
  (dataPtr.*)[1] += 1;
  (dataPtr.*)[2] += 1;

  // Read all array values, sum them, and write the result
  resultPtr.* = (dataPtr.*)[0] + (dataPtr.*)[1] + (dataPtr.*)[2];
}

task mainTask() void {
  var result:i16 = 0;
  var data = [3]i16 { 1, 2, 3 };

  incrementAndSum(&data, &result);
  @mov16(dsd, result);
}

fn f_run() void {
  @activate(main_task_id);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime {
  @bind_local_task(mainTask, main_task_id);

  @export_symbol(f_run);
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}
