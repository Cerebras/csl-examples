// Copyright 2025 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param batch_size: u16;
param num_batches: u16;

param in_color: color;
param out_color: color;

// Local task IDs.
const local_ids = .{8, 9};

const ctrl = @import_module("<control>");

const input_q = @get_input_queue(0);
const output_q = @get_output_queue(0);

const inDSD = @get_dsd(fabin_dsd, .{.extent = batch_size,
                                    .fabric_color = in_color,
                                    .input_queue = input_q});

const outDSD = @get_dsd(fabout_dsd, .{.extent = batch_size,
                                      .fabric_color = out_color,
                                      .output_queue = output_q});

const ctrlOurDSD = @get_dsd(fabout_dsd, .{.extent = 1,
                                          .fabric_color = out_color,
                                          .output_queue = output_q,
                                          .control = true});

// Control wavelet buffer and corresponding memory DSD.
const ctrl_buffer = [1]u32{ctrl.encode_single_payload(ctrl.opcode.SWITCH_ADV, true, {}, 0)};
const ctrl_dsd = @get_dsd(mem1d_dsd, .{.base_address = &ctrl_buffer, .extent = 1});

var i: u16 = 0;

const main_id = @get_local_task_id(local_ids[0]);
task main() void {
  // When we process the last batch, we don't need to send a
  // control wavelet. That's because the last PE of the demux
  // layer doesn't need to advance its switch position.
  if (i == num_batches - 1) {
    @mov32(outDSD, inDSD, .{.async = true});
    return;
  }
  @mov32(outDSD, inDSD, .{.async = true, .activate = send_ctrl});
  i += 1;
}

// Control wavelet is sent here to trigger the advancement of
// the switch position of the next demux PE.
const send_ctrl_id = @get_local_task_id(local_ids[1]);
task send_ctrl() void {
  @mov32(ctrlOurDSD, ctrl_dsd, .{.async = true, .activate = main});
}

comptime {
  @bind_local_task(main, main_id);
  @activate(main_id);

  @bind_local_task(send_ctrl, send_ctrl_id);

  @initialize_queue(input_q, .{.color = in_color});
  if (@is_arch("wse3")) {
    @initialize_queue(output_q, .{.color = out_color});
  }
}
