// Not a complete program; we include it here for illustrating the syntax.

fn abs(input: f16) f16 {
  if (input < 0.0) {
    return -input;
  }

  return input;
}

fn nan() f16 {
  // Cast 0xffff as a 16-bit unsigned integer
  const intValue = @as(u16, 0xffff);

  // Interpret 0xffff as an IEEE 754 binary16 value; NOT int-to-float
  return @bitcast(f16, intValue);
}

fn my_sqrt(input: f16, maxIterations: i16) f16 {
  var count: i16 = 1;
  var prev: f16 = 0.0;
  var result = input;

  if (input < 0.0) {
    return nan();
  }

  while (count < maxIterations) {
    // Terminate early if the result has not changed significantly
    if (abs(result - prev) < 1e-6) {
      break;
    }

    prev = result;
    result = 0.5 * (result + input / result);
    count += 1;
  }

  return result;
}
