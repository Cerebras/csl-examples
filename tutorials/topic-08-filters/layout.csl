// Copyright 2025 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Color map
//
//  ID var           ID var            ID var                ID var
//   0                9                18                    27 reserved (memcpy)
//   1 data_color    10                19                    28 reserved (memcpy)
//   2               11                20                    29 reserved
//   3               12                21 reserved (memcpy)  30 reserved (memcpy)
//   4               13                22 reserved (memcpy)  31 reserved
//   5               14                23 reserved (memcpy)  32
//   6               15                24                    33
//   7               16                25                    34
//   8               17                26                    35

// See task maps in send.csl and recv.csl

// Colors
const data_color: color = @get_color(1);

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = 4,
  .height = 1,
});

layout {
  @set_rectangle(4, 1);

  // Sender
  @set_tile_code(0, 0, "send.csl", .{
    .exch_color = data_color, .memcpy_params = memcpy.get_params(0), .pe_id = 0,
  });
  @set_color_config(0, 0, data_color, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST } } });

  // Receivers
  for (@range(u16, 1, 4, 1)) |pe_id| {
    const filter = .{
      // Each PE should only accept three wavelets starting with the one whose
      // index field contains the value pe_id * 3.
      .kind = .{ .range = true },
      .min_idx = pe_id * 3,
      .max_idx = pe_id * 3 + 2,
    };

    @set_tile_code(pe_id, 0, "recv.csl", .{
      .recv_color = data_color, .memcpy_params = memcpy.get_params(pe_id), .pe_id = pe_id,
    });

    if (pe_id == 3) {
      @set_color_config(pe_id, 0, data_color, .{
        .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }}, .filter = filter
      });
    } else {
      @set_color_config(pe_id, 0, data_color, .{
        .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP, EAST }}, .filter = filter
      });
    }
  }

  // export symbol names
  @export_name("result", [*]f32, true);
  @export_name("main_fn", fn()void);
}
