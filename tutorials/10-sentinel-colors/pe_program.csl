// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

// Entrypoint to tell PE that it is time to send the result to the host
param end_computation: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

// number of wavelets via streaming H2D
var num_wvlts: i16 = 0;

// number of received wavelets
var index: i16 = 0;

var result :f16 = 0.0;

const dsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = MEMCPYD2H_DATA_1
});

task main_task(data: f16) void {
  result = result + data;
  index += 1;
  if (index >= num_wvlts){
    // receive all wavelets, send the final result out
    @activate(end_computation);
  }
}

task send_result() void {
  // The non-async operation may not work here because the length is 5.
  // The async operation with microthread 1 is used.
  @fmovh(dsd, result);
}

comptime {
  @bind_task(main_task, MEMCPYH2D_DATA_1);
  @bind_task(send_result, end_computation);
}

// configure the number of wavelets via H2D
fn f_run(size: i16) void {
  num_wvlts = size;

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
