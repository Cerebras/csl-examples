// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const mainColor: color = @get_color(0);
const output_color: color = @get_color(1);
const dsd = @get_dsd(fabout_dsd, .{.fabric_color = output_color, .extent = 1});

fn incrementAndSum(dataPtr: *[3]i16, resultPtr: *i16) void {
  // Write an updated value to each element of the array
  (dataPtr.*)[0] += 1;
  (dataPtr.*)[1] += 1;
  (dataPtr.*)[2] += 1;

  // Read all array values, sum them, and write the result
  resultPtr.* = (dataPtr.*)[0] + (dataPtr.*)[1] + (dataPtr.*)[2];
}

task mainTask() void {
  var result:i16 = 0;
  var data = [3]i16 { 1, 2, 3 };

  incrementAndSum(&data, &result);
  @mov16(dsd, result);
}

comptime {
  @bind_task(mainTask, mainColor);
  @activate(mainColor);
}

layout {
  @set_rectangle(1, 1);
  @set_tile_code(0, 0);

  const output_route = .{ .rx = .{ RAMP }, .tx = .{ EAST } };
  @set_color_config(0, 0, output_color, output_route);
}
