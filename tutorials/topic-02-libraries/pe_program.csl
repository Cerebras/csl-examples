// Copyright 2025 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is layout.csl.
param memcpy_params: comptime_struct;

param iterations: u32;

const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);

// Import compiler-bundled libraries, which are identified by names surrounded
// by angular brackets ('<' and '>').
const random = @import_module("<random>");
const tsc = @import_module("<time>");
const math = @import_module("<math>");

// Declare variables for storing the timestamp counter at the start and the end
// of the core computation.
var startBuffer = @zeros([tsc.tsc_size_words]u16);
var finishBuffer = @zeros([tsc.tsc_size_words]u16);

var start_ts_ptr: [*]u16 = &startBuffer;
var finish_ts_ptr: [*]u16 = &finishBuffer;

// Result to be copied back to the host
var result: [1]f32;
var result_ptr: [*]f32 = &result;

fn f_run() void {
  var idx: u32 = 0;
  var hitCount: u32 = 0;

  tsc.enable_tsc();
  tsc.get_timestamp(&startBuffer);

  // For each iteration, compute two random values between -1 and +1, and check
  // whether they are inside the circle of unit radius.
  while (idx < iterations) : (idx += 1) {
    var x = random.random_f32(-1.0, 1.0);
    var y = random.random_f32(-1.0, 1.0);
    var distanceFromOrigin = math.sqrt_f32(x * x + y * y);

    if (distanceFromOrigin <= 1.0) {
      hitCount += 1;
    }
  }

  tsc.get_timestamp(&finishBuffer);

  result[0] = 4.0 * @as(f32, hitCount) / @as(f32, iterations);

  sys_mod.unblock_cmd_stream();
}

comptime {
  @export_symbol(result_ptr, "result");
  @export_symbol(start_ts_ptr, "start_timestamp");
  @export_symbol(finish_ts_ptr, "finish_timestamp");
  @export_symbol(f_run);
}
