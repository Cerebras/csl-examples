// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param num_elements_to_process : i16;

var fifo_buffer = @zeros([1024]f16);
const fifo = @allocate_fifo(fifo_buffer);

const in_color: color = @get_color(0);
const in_queue = 0;
const in_dsd = @get_dsd(fabin_dsd, .{.extent = num_elements_to_process,
                                     .fabric_color = in_color,
                                     .input_queue = in_queue});
comptime {
  @set_local_color_config(in_color, .{.rx = .{WEST}, .tx = .{RAMP}});
  @block(in_color);
}

const out_color: color = @get_color(1);
const out_queue = 1;
const out_dsd = @get_dsd(fabout_dsd, .{.extent = num_elements_to_process,
                                       .fabric_color = out_color,
                                       .output_queue = out_queue});
comptime {
  @set_local_color_config(out_color, .{.rx = .{RAMP}, .tx = .{RAMP}});
  @bind_task(process_task, out_color);
}

const ten = [1]f16 {10.0};
const dsd_ten = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{num_elements_to_process} -> ten[0]});

task main_task() void {
  // Move from the fabric to the FIFO
  // adding 10.0 to each element at the same time
  @faddh(fifo, in_dsd, dsd_ten, .{.async = true});

  // Move from the FIFO to a process_task
  // negating values at the same time
  @fnegh(out_dsd, fifo, .{.async = true});
}

const main_task_color: color = @get_color(2);
comptime {
  @bind_task(main_task, main_task_color);
  @activate(main_task_color);
}

const result_color: color = @get_color(3);
const result_dsd = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = result_color});
comptime {
  @set_local_color_config(result_color, .{.rx = .{RAMP}, .tx = .{EAST}});
}

task process_task(element:f16) void {
  @fmovh(result_dsd, element * element * element);
}
