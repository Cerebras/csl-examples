// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

// The communication pattern:
// streaming H2D --> FIFO --> C9 (out_color) --> process_task --> streaming D2H
//
// WARNING: it can stall if the input length exceeds the FIFO's capacity
// H2D and D2H are serialized. Logically speaking it is NOT valid to send to and
// receive from at the same time on the same PE.
// If input length does not exceed the FIFO's capacity, the H2D will stream all
// data into FIFO, then D2H proceeds to process the data from process_task(),
// so microthread 2 can continue to pop data in FIFO.
// Otherwise, H2D will not finish because FIFO is full and D2H is not started
// yet to consume the data from process_task().
//
// If both input and output of the FIFO are not H2D/D2H, no limitation on the size.
// If either input is H2D or output is D2H but not both, it depends, case by case.

param num_elements_to_process : i16;

param out_color: color;
param main_task_color: color;

param memcpy_params: comptime_struct;
param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

var fifo_buffer = @zeros([1024]f16);
const fifo = @allocate_fifo(fifo_buffer);

const in_queue = @get_input_queue(1);
const in_dsd = @get_dsd(fabin_dsd, .{.extent = num_elements_to_process,
                                     .fabric_color = MEMCPYH2D_DATA_1,
                                     .input_queue = in_queue});
comptime {
  // use UT1 to read data into fifo
  @block(MEMCPYH2D_DATA_1);
}

const out_queue = @get_output_queue(2);
const out_dsd = @get_dsd(fabout_dsd, .{.extent = num_elements_to_process,
                                       .fabric_color = out_color,
                                       .output_queue = out_queue});
comptime {
  @set_local_color_config(out_color, .{.routes = .{.rx = .{RAMP}, .tx = .{RAMP}}});
  @bind_task(process_task, out_color);
}

const ten = [1]f16 {10.0};
const dsd_ten = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{num_elements_to_process} -> ten[0]});

task main_task() void {
  // Move from the fabric to the FIFO
  // adding 10.0 to each element at the same time
  @faddh(fifo, in_dsd, dsd_ten, .{.async = true});

  // Move from the FIFO to a process_task
  // negating values at the same time
  @fnegh(out_dsd, fifo, .{.async = true});
}

comptime {
  @bind_task(main_task, main_task_color);
  // enable FIFO at the beginning
  // FIFO is waiting for the data from streaming H2D
  @activate(main_task_color);
}

const result_dsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = MEMCPYD2H_DATA_1,
  .output_queue = @get_output_queue(3)
});

var buf = @zeros([1]f16);
const buf_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{1} -> buf[i]});

task process_task(element:f16) void {
  @block(out_color); // necessary to avoid re-entry of the same microthread
  buf[0] = element * element * element;
  // WARNING: it stalls if blocking fmovh when the input length exceeds
  // the internal queue because main thread stalls so D2H has no chance
  // to start.
  @fmovh(result_dsd, buf_dsd, .{.async = true, .unblock = out_color} );
}
