// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param txColor: color;
param mainColor: color;
param colorValue;

const dsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = txColor,

  // Specify that this wavelet is a control wavelet
  .control = true,
});

// Opcodes for potentially updating switches
const opcode_nop = 0;
const opcode_switch_advance = 1;
const opcode_switch_reset = 2;
const opcode_teardown = 3;

// Helper function to construct the payload of the control wavelet.
// args:
//    ceFilter: a filter bit to disable transmission from the destination
//              router to the destination CE,
//    opcode: switching opcode (see comment above), and
//    data: 16-bit wavelet data
fn ctrl(ce_filter: bool, opcode: i16, data: u16) u32 {
  const six = @as(u32, 6);
  const eight = @as(u32, 8);
  const sixteen = @as(u32, 16);

  const hi_word = @as(u32, colorValue) |
                  @as(u32, opcode) << six |
                  @as(u32, ce_filter) << eight;

  const lo_word = @as(u32, data);
  return hi_word << sixteen | lo_word;
}

task mainTask() void {
  // Now we can reuse a single color to send four different values to the four
  // neighbors of this PE.  The four wavelets will be sent over four
  // consecutive cycles.

  // Send 0xaa along the first (WEST) direction
  // Since all arguments to this function are known at compile time, we make
  // this a `comptime` function call.
  @mov32(dsd, comptime ctrl(false, opcode_switch_advance, 0xaa));

  // Send 0xbb along the second (EAST) direction
  @mov32(dsd, comptime ctrl(false, opcode_switch_advance, 0xbb));

  // Send 0xcc along the third (SOUTH) direction
  @mov32(dsd, comptime ctrl(false, opcode_switch_advance, 0xcc));

  // Send 0xdd along the fourth (NORTH) direction
  @mov32(dsd, comptime ctrl(false, opcode_switch_advance, 0xdd));
}

comptime {
  @bind_task(mainTask, mainColor);
  @activate(mainColor);

  const route = .{
    // The default route, which is to receive from ramp and send to north
    .rx = .{ RAMP },
    .tx = .{ NORTH },

    // Upon a control wavelet, change the transmit direction to west
    .pos1 = .{ .tx = WEST },

    // Upon another control wavelet, change the transmit direction to east
    .pos2 = .{ .tx = EAST },

    // Upon yet another control wavelet, change the transmit direction to south
    .pos3 = .{ .tx = SOUTH },

    // Send to west PE first, then east PE, then south PE, and then north PE
    .current_switch_pos = 1,

    // Wrap around from position 3 to position 0 after receiving control wavelet
    .ring_mode = true,
  };

  @set_local_color_config(txColor, route);
}
