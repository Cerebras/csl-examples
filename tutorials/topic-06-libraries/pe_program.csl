// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is layout.csl.
param memcpy_params: comptime_struct;

param iterations: u32;

// Task IDs
param main_task_id: local_task_id;

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);

// Import compiler-bundled libraries, which are identified by names surrounded
// by angular brackets ('<' and '>').
const random = @import_module("<random>");
const tsc = @import_module("<time>");
const math = @import_module("<math>");

// Declare variables for storing the timestamp counter at the start and the end
// of the core computation.
var startBuffer = @zeros([tsc.tsc_size_words]u16);
var finishBuffer = @zeros([tsc.tsc_size_words]u16);
var timeBuffer = @zeros([tsc.tsc_size_words*2]u16);

/// Send the final result to the host.
fn sendResult(result: f32) void {
  const resultDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = sys_mod.MEMCPYD2H_1,
    .output_queue = @get_output_queue(1)
  });
  // The sync operation works here because the length is 1
  // It would better to use {.async=true}
  @fmovs(resultDsd, result);
}

/// Send the begin and end timestamp counters to the host, which then performs a
/// 48-bit subtraction to get the final cycle count.
fn sendTimeStampCounters() void {
  timeBuffer[0] = startBuffer[0];
  timeBuffer[1] = startBuffer[1];
  timeBuffer[2] = startBuffer[2];

  timeBuffer[3] = finishBuffer[0];
  timeBuffer[4] = finishBuffer[1];
  timeBuffer[5] = finishBuffer[2];

  const timeBufferDsd = @get_dsd(mem1d_dsd, .{
    .tensor_access = |i|{tsc.tsc_size_words*2} -> timeBuffer[i]
  });

  const timeStampDsd = @get_dsd(fabout_dsd, .{
    .extent = tsc.tsc_size_words*2,
    .fabric_color = sys_mod.MEMCPYD2H_1,
    .output_queue = @get_output_queue(1)
  });

  @mov16(timeStampDsd, timeBufferDsd, .{.async=true});
}

task mainTask() void {
  var idx: u32 = 0;
  var hitCount: u32 = 0;

  tsc.enable_tsc();
  tsc.get_timestamp(&startBuffer);

  // For each iteration, compute two random values between -1 and +1, and check
  // whether they are inside the circle of unit radius.
  while (idx < iterations) : (idx += 1) {
    var x = random.random_f32(-1.0, 1.0);
    var y = random.random_f32(-1.0, 1.0);
    var distanceFromOrigin = math.sqrt_f32(x * x + y * y);

    if (distanceFromOrigin <= 1.0) {
      hitCount += 1;
    }
  }

  tsc.get_timestamp(&finishBuffer);
  sendResult(4.0 * @as(f32, hitCount) / @as(f32, iterations));
}

comptime {
  @bind_local_task(mainTask, main_task_id);
}

fn f_run() void {
  @activate(main_task_id);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

fn f_send_timestamps() void {
  sendTimeStampCounters();

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @export_symbol(f_send_timestamps);
}
