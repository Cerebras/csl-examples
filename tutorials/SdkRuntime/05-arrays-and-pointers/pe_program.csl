// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Color which we bind to main_task
const main_color: color = @get_color(8);

param MEMCPYD2H_DATA_1: color;       // Color used for D2H memcpy transfer
param memcpyParams: comptime_struct; // Struct containing memcpy params

// This module is needed for memcpy infrastructure
const sys_mod = @import_module("<memcpy_multi/memcpy>", @concat_structs(memcpyParams, .{
     .MEMCPYD2H_1=MEMCPYD2H_DATA_1
}));

fn incrementAndSum(dataPtr: *[3]i16, resultPtr: *i16) void {
  // Write an updated value to each element of the array
  (dataPtr.*)[0] += 1;
  (dataPtr.*)[1] += 1;
  (dataPtr.*)[2] += 1;

  // Read all array values, sum them, and write the result
  resultPtr.* = (dataPtr.*)[0] + (dataPtr.*)[1] + (dataPtr.*)[2];
}

// Data structure definition to send the output to the fabric
const out_dsd = @get_dsd(fabout_dsd, .{.fabric_color = MEMCPYD2H_DATA_1, .extent = 1});

// Task that will be immediately activated
task main_task() void {
  var result: i16 = 0;
  var data = [3]i16 { 1, 2, 3 };

  incrementAndSum(&data, &result);
  @mov16(out_dsd, result);
}

comptime {
  // Associate the task with a comptime-activated color
  @bind_task(main_task, main_color);

  // Activate the color to run the task
  @activate(main_color);
}
