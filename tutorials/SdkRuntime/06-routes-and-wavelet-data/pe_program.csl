// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Memory whose value we intend to update
var global: i16 = 0;

param MEMCPYH2D_DATA_1: color;       // Color used for H2D memcpy transfer
param MEMCPYD2H_DATA_1: color;       // Color used for D2H memcpy transfer
param memcpyParams: comptime_struct; // Struct containing memcpy params

// This module is needed for memcpy infrastructure
const sys_mod = @import_module("<memcpy_multi/memcpy>", @concat_structs(memcpyParams, .{
     .MEMCPYH2D_1=MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1=MEMCPYD2H_DATA_1
}));

// Data structure definition to send the output to the fabric
const dsd = @get_dsd(fabout_dsd, .{.fabric_color = MEMCPYD2H_DATA_1, .extent = 1});

// Task activated upon receipt of wavelet along color MEMCPYH2D_DATA_1
task main_task(wavelet_data: i16) void {
  global = wavelet_data;
  @mov16(dsd, global);
}

comptime {
  // Associate the main_task with the memcpy H2D color
  @bind_task(main_task, MEMCPYH2D_DATA_1);
}
