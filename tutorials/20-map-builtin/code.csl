// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param out_color: color = @get_color(0);
param main_color: color = @get_color(1);
param input_color: color = @get_color(2);

param size: i16;
const A = @constants([size, size]f16, 42.0);
const B = [size]i16{10, 20, 30, 40, 50};

const math_lib = @import_module("<math>");

// The loop structure is implicitly specified by the memory DSD descriptions
const dsdA = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{size} -> A[i, i]});
const dsdB = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{size} -> B[i]});
const inDSD = @get_dsd(fabin_dsd, .{.extent = size, .fabric_color = input_color});
const outDSD = @get_dsd(fabout_dsd, .{.extent = size, .fabric_color = out_color});

var sum : i16 = 0;

fn transformation(value : f16, coeff1 : f16, coeff2 : f16, weight : f16) f16 {
  return value * (coeff1 + weight) + value * (coeff2 + weight);
}

fn reduction(value : i16, sum : *i16) i16 {
  return sum.* + value;
}

task main() void {
  // Compute the square-root of each element of `dsdA` and
  // send it out to `outDSD`.
  //
  // Notice how we avoid writing an explicit loop and rely
  // on the DSD description instead.
  @map(math_lib.sqrt_f16, dsdA, outDSD);

  // Transform tensor A in-place through a custom calculation.
  @map(transformation, dsdA, 2.0, 6.0, inDSD, dsdA);

  // Compute the sum of all elements in tensor B.
  @map(reduction, dsdB, &sum, &sum);
}

comptime {
  @bind_task(main, main_color);
  @activate(main_color);
  @block(input_color);
  @set_local_color_config(out_color, .{.rx = .{RAMP}, .tx = .{EAST}});
  @set_local_color_config(input_color, .{.rx =.{WEST}, .tx =.{RAMP}});
}

layout {
  @set_rectangle(1, 1);
  @set_tile_code(0, 0, "code.csl", .{.size = size});
}
