// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param peId: u16;

param recvColor: color;

param memcpy_params: comptime_struct;
param LAUNCH: color;
param MEMCPYD2H_DATA_1: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

const num_wvlts: i16 = 3;
var index: i16 = 0;

var buf = @zeros([num_wvlts]f16);
var ptr_buf : [*]f16 = &buf;

// The recipient simply halves the value in the incoming wavelet
task recvTask(data: f16) void {
  buf[index] = data / 2.0;
  index += 1;
  if (index >= num_wvlts){
     // receive all wavelets, proceed next command
     // WARNING: the user must unblock cmd color for every PE
     sys_mod.unblock_cmd_stream();
  }
}

comptime {
  @bind_task(recvTask, recvColor);

  // f_run() unblocks this color to receive the broadcasting value
  @block(recvColor);

  const baseRoute = .{
    .rx = .{ WEST }
  };

  const filter = .{
      // Each PE should only accept three wavelets starting with the one whose
      // index field contains the value peId * 3.
      .kind = .{ .range = true },
      .min_idx = peId * 3,
      .max_idx = peId * 3 + 2,
    };

  if (peId == 3) {
    // This is the last PE, don't forward the wavelet further to the east.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  } else {
    // Otherwise, forward incoming wavelets to both CE and to the east neighbor.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP, EAST } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  }
}

// only sender triggers the broadcasting
// receiver unblocks recvColor to receive the data from the sender
fn f_run() void {
  // starts to receive the data from the sender
  @unblock(recvColor);

  // terminates only when all wavelets are received
}

comptime{
  @export_symbol(ptr_buf, "buf");
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
