param peId: u16;

param recvColor: color;
param resultColor: color;

/// The recipient simply halves the value in the incoming wavelet and sends the
/// result to the north neighbor (halo PE).
task recvTask(data: f16) void {
  const outDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = resultColor,
  });

  @fmovh(outDsd, data / 2.0);
}

comptime {
  @bind_task(recvTask, recvColor);

  const baseRoute = .{
    .rx = .{ WEST }
  };

  const filter = .{
      // Each PE should only accept three wavelets starting with the one whose
      // index field contains the value peId * 3.
      .kind = .{ .range = true },
      .min_idx = peId * 3,
      .max_idx = peId * 3 + 2,
    };

  if (peId == 3) {
    // This is the last PE, don't forward the wavelet further to the east.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  } else {
    // Otherwise, forward incoming wavelets to both CE and to the east neighbor.
    const txRoute = @concat_structs(baseRoute, .{ .tx = .{ RAMP, EAST } });
    @set_local_color_config(recvColor, .{.routes = txRoute, .filter = filter});
  }

  // Send result wavelets to the north neighbor (i.e. the halo PEs).
  @set_local_color_config(resultColor, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ NORTH } } });
}
