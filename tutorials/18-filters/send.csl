// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param peId: u16;

param mainColor: color;
param exchColor: color;

param memcpy_params: comptime_struct;
param LAUNCH: color;
param MEMCPYD2H_DATA_1: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));


/// Helper function to pack 16-bit index and 16-bit float value into one 32-bit
/// wavelet.
fn pack(index: u16, data: f16) u32 {
  return (@as(u32, index) << 16) | @as(u32, @bitcast(u16, data));
}

const size = 12;
const data = [size]u32 {
  pack(0, 10.0),  pack( 1, 11.0), pack( 2, 12.0),
  pack(3, 13.0),  pack( 4, 14.0), pack( 5, 15.0),
  pack(6, 16.0),  pack( 7, 17.0), pack( 8, 18.0),
  pack(9, 19.0),  pack(10, 20.0), pack(11, 21.0),
};

/// Function to send all data values to all east neighbors.
fn sendDataToEastTiles() void {
  const inDsd = @get_dsd(mem1d_dsd, .{
    .tensor_access = |i|{size} -> data[i]
  });

  const outDsd = @get_dsd(fabout_dsd, .{
    .extent = size,
    .fabric_color = exchColor,
  });

  @mov32(outDsd, inDsd);
}


const num_wvlts: i16 = 3;
var buf = @zeros([num_wvlts]f16);
var ptr_buf : [*]f16 = &buf;

// Function to process (divide by 2) the first three values
fn processAndSendSubset() void {

  var idx: u16 = 0;
  while (idx < 3) : (idx += 1) {
    const payload = @as(u16, data[idx] & 0xffff);
    const floatValue = @bitcast(f16, payload);
    buf[idx] = floatValue / 2.0;
  }
}

task mainTask() void {
  // broadcast to all PEs, including itself
  sendDataToEastTiles();
  // prepare data in "buf"
  processAndSendSubset();

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime {
  @bind_task(mainTask, mainColor);

  @set_local_color_config(exchColor, .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST } } });
}

// only sender triggers the broadcasting
fn f_run() void {
  @activate(mainColor);
  // terminate when the mainTask is done
}

comptime{
  @export_symbol(ptr_buf, "buf");
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
