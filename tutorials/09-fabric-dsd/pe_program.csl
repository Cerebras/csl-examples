// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param size: i16;
param main: color;

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

const inDsd = @get_dsd(fabin_dsd, .{
  .extent = size,
  .fabric_color = MEMCPYH2D_DATA_1,
  .input_queue = @get_input_queue(1),
});

const outDsd = @get_dsd(fabout_dsd, .{
  .extent = size,
  .fabric_color = MEMCPYD2H_DATA_1,
  .output_queue = @get_output_queue(1)
});

var buf = @zeros([1]i16);
const one_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{size} -> buf[0] });

task mainTask() void {
  // WARNING 1: sync ops can stall
  // The non-async operation "@add16(outDsd, inDsd, 1)" stalls here because the
  // length may exceed the capacity of an input queue.
  // The async operation with microthread 1 is used.
  //
  // WARNING 2: async with large size can stall
  // H2D and D2H are serialized. Logically speaking it is NOT valid to send to and
  // receive from at the same time on the same PE.
  // The async op here is NOT safe.
  // It only works for a small vector because the HW has some internal queues to
  // hold those values from/to IO. If such queues are full, I/O stalls.
  //
  // In this case, if the length exceeds certain amount of value, H2D cannot finish
  // because D2H does not start yet.

  // async operation requires all operations are DSDs to avoid race condition.
  // prepare buf = 1.
  buf[0] = @as(i16, 1);
  @add16(outDsd, inDsd, one_dsd, .{.async=true});
}

comptime {
  // block H2D and use microthread 1 to read the wavelets in the queue 1
  @block(MEMCPYH2D_DATA_1);
  @bind_task(mainTask, main);
}

fn f_run() void {
  @activate(main);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
