// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is layout.csl.

param memcpy_params: comptime_struct;

//Colors
param red:  color;
param blue: color;

// Task IDs
param wtt_h2d_task_id: data_task_id; // Data task wtt_h2d triggered by MEMCPYH2D_DATA_1 wlts
param red_task_id:     data_task_id; // Data task red_task triggered by red wlts
param blue_task_id:    data_task_id; // Data task blue_task triggerd by blue wlts

const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);

// Import two instances of <debug>:
// `trace` records comptime string and value of 'global'
// `times` records timestamps at begin and end of tasks
const trace = @import_module(
  "<debug>",
  .{ .key = "trace",
     .buffer_size = 100,
   }
);
const times = @import_module(
  "<debug>",
  .{ .key = "times",
     .buffer_size = 100,
   }
);


// Variable whose value we update in our tasks
var global : i16 = 0;

// Task that will be triggered by red wavelet
task red_task(in_data : i16) void {
  // Record timestamp for beginning of task in `times`
  times.trace_timestamp();

  // Record string denoting task color in `trace`
  trace.trace_string("Start red task");

  // Update global variable
  global += in_data;

  // Record updated value of global in `trace`
  trace.trace_i16(global);

  // Record timestamp for end of task in `times`
  times.trace_timestamp();
}

// Task that will be triggered by blue wavelet
task blue_task(in_data : i16) void {
  // Record timestamp for beginning of task in `times`
  times.trace_timestamp();

  // Record string denoting task color in `trace`
  trace.trace_string("Start blue task");

  // Update global variable
  global += in_data * 2;

  // Record updated value of global in `trace`
  trace.trace_i16(global);

  // Record timestamp for end of task in `times`
  times.trace_timestamp();
}

comptime {
  // Associate the appropriate task with the wavelet's color
  @bind_data_task(red_task, red_task_id);
  @bind_data_task(blue_task, blue_task_id);
}


var buf = @zeros([1]i16);
var ptr_buf: [*]i16 = &buf;

const bufDsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{1} -> buf[i]});

// PEs 0, 2 activate blue task; 1, 3 activate red task.
const outDsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = blue,
  .output_queue = @get_output_queue(1)
});

// receive data from streaming H2D and forward it to color red
task wtt_h2d(data: i16) void {
  @block(wtt_h2d_task_id);
  buf[0] = data;
  @mov16(outDsd, bufDsd, .{.async=true, .unblock=wtt_h2d_task_id} );
}

comptime {
  @bind_data_task(wtt_h2d, wtt_h2d_task_id);

  @export_symbol(ptr_buf, "buf");
}
