// Copyright 2023 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// sentinel.csl appends a variable length input with a sentinel
// Here is the layout
//           +---------------+              +-------+
//  IN_1 --> | sentinel.csl  | --> OUT_1 -> | core  |
//  IN_2 --> |               |              +-------+
//           +---------------+
//
// IN_1 receives the number of wavelets of IN_2
// IN_2 receives the data
// OUT_1 forwards data from IN_2 and appends a sentinel at the end
param memcpy_params: comptime_struct;

// Sentinel to signal end of data
param SENTINEL: u16;

// Colors
param OUT_1: color; // forwards data from IN_2 with appended sentinel

// Task IDs
param wtt_in_1_task_id: data_task_id; // Data task triggered by IN_1
param wtt_in_2_task_id: data_task_id; // Data task triggered by IN_2

// ----------
// Every PE needs to import memcpy module otherwise the I/O cannot
// propagate the data to the destination.

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy/memcpy>", memcpy_params);
// ----------

var num_wvlts:i16 = 0;
var index: i16 = 0;

const fab_trans_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = OUT_1
});

const fab_trans_ctrl_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .control = true,
    .fabric_color = OUT_1
});

// IN_1 receives number of wavelets of IN_2
task wtt_in_1(data: u32) void {
  num_wvlts = @as(i16, data);
}

// IN_2 forwards data to OUT_1 and appends a sentinel
// at the end.
task wtt_in_2(data: u32) void {
  @mov32(fab_trans_wdsd, data);
  index = index + 1;
  if (index >= num_wvlts){
     // append a sentinel
     const ctrl_wvlt = @as(u32, SENTINEL) << 16;
     @mov32(fab_trans_ctrl_wdsd, ctrl_wvlt);
     index = 0;
  }
}

comptime {
  @bind_data_task(wtt_in_1, wtt_in_1_task_id);
  @bind_data_task(wtt_in_2, wtt_in_2_task_id);
}
