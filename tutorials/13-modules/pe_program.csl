// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

param mainColor: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

const fabDsd = @get_dsd(fabout_dsd, .{
  .extent = 10,
  .fabric_color = MEMCPYD2H_DATA_1,
  .output_queue = @get_output_queue(1)
});

// Import the code in the file `fibonacci.csl` as the module `mod`, and
// instantiate the module's `limit` parameter.
const mod = @import_module("fibonacci.csl", .{ .limit = 50 });

task mainTask() void {
  // Compute the first 10 numbers in the Fibonacci sequence.
  mod.compute_fib_sequence(10);
  @mov16(fabDsd, mod.memDsd, .{.async=true});
}

comptime {
  @bind_task(mainTask, mainColor);
}

fn f_run() void {
  @activate(mainColor);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
