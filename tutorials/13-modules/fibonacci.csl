// Not a complete program; the top-level source file is code.csl.

// Determines how many integers to allocate on the stack.
param limit :i16;
var result = @zeros([limit]i16);

const memDsd = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{10} -> result[i]
});

fn fib(n: i16) i16 {
  if (result[n] != 0 and n >= 0 and n < limit) {
    return result[n];
  }

  if (n < 2) {
    result[n] = 1;

  } else {
    result[n] = fib(n - 2) + fib(n - 1);
  }

  return result[n];
}

fn compute_fib_sequence(count: i16) void {
  // The fib function accepts the index of the Fibonacci number to compute.
  // The function populates the `result` variable.
  fib(count - 1);
}
