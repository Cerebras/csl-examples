// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param useIntegerType: i16;
param main_color: color;

param memcpy_params: comptime_struct;
param LAUNCH: color;
param MEMCPYD2H_DATA_1: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

fn fetchType() type {
  if (useIntegerType != 0) {
    return i16;
  } else {
    return f16;
  }
}

var global = @as(fetchType(), 0);

const dsd = @get_dsd(fabout_dsd, .{
   .extent = 1,
   .fabric_color = MEMCPYD2H_DATA_1
});

task main_task() void {
  global = @as(fetchType(), 42);

  if (useIntegerType != 0) {
    @mov16(dsd, global);
  } else {
    @fmovh(dsd, global);
  }
}

comptime {
  @bind_task(main_task, main_color);
}

fn f_run() void {
  @activate(main_color);

  // RPC returns early before the data is sent out via D2H color
  // The host must wait for streaming D2H

  // WARNING: the user must unblock cmd color for every PE
  sys_mod.unblock_cmd_stream();
}

comptime{
  @export_symbol(f_run);
  @rpc(LAUNCH);
}
