param useIntegerType: i16;

fn fetchType() type {
  if (useIntegerType != 0) {
    return i16;
  } else {
    return f16;
  }
}

var global = @as(fetchType(), 0);

const main_color: color = @get_color(0);
const output_color: color = @get_color(1);
const dsd = @get_dsd(fabout_dsd, .{.fabric_color = output_color, .extent = 1});

task main_task() void {
  global = @as(fetchType(), 42);

  if (useIntegerType != 0) {
    @mov16(dsd, global);
  } else {
    @fmovh(dsd, global);
  }
}

comptime {
  @bind_task(main_task, main_color);
  @activate(main_color);
}

layout {
  @set_rectangle(1, 1);
  @set_tile_code(0, 0, "code.csl", .{ .useIntegerType = useIntegerType });

  // Configure the wavelet route for the output message
  const output_route = .{ .rx = .{ RAMP }, .tx = .{ EAST } };
  @set_color_config(0, 0, output_color, .{ .routes = output_route });
}
