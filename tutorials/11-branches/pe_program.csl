// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));

var result :i16 = 0;
const dsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = MEMCPYD2H_DATA_1
});

fn absoluteValue(input: i16) i16 {
  if (input < 0) {
    return -input;
  }

  return input;
}

fn factorial(input: i16) i16 {
  if (input <= 0) {
    return 1;
  }

  return input * factorial(input - 1);
}

task mainTask(data: i16) void {
  const abs = absoluteValue(data);
  result = factorial(abs);
  // H2D and D2H are serialized. Logically speaking it is NOT valid to send to and
  // receive from at the same time on the same PE.
  // It only works for a small vector because the HW has some internal queues to
  // hold those values from/to IO. If such queues are full, I/O stalls.
  @mov16(dsd, result);
}

comptime {
  @bind_task(mainTask, MEMCPYH2D_DATA_1);
}
