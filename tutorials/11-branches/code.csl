// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var result :i16 = 0;
const mainColor: color = @get_color(0);
const output_color: color = @get_color(1);
const dsd = @get_dsd(fabout_dsd, .{.fabric_color = output_color, .extent = 1});

fn absoluteValue(input: i16) i16 {
  if (input < 0) {
    return -input;
  }

  return input;
}

fn factorial(input: i16) i16 {
  if (input <= 0) {
    return 1;
  }

  return input * factorial(input - 1);
}

task mainTask(data: i16) void {
  const abs = absoluteValue(data);
  result = factorial(abs);
  @mov16(dsd, result);
}

comptime {
  @bind_task(mainTask, mainColor);
}

layout {
  @set_rectangle(1, 1);
  @set_tile_code(0, 0, "code.csl");

  const route = .{ .rx = .{ WEST }, .tx = .{ RAMP } };
  @set_color_config(0, 0, mainColor, .{ .routes = route });

  const output_route = .{ .rx = .{ RAMP }, .tx = .{ EAST } };
  @set_color_config(0, 0, output_color, .{ .routes = output_route });
}
