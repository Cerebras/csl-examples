// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

// Import two instances of <debug>:
// `trace` records comptime string and value of 'global'
// `times` records timestamps at begin and end of tasks
const trace = @import_module("<debug>", .{.buffer_size = 100});
const times = @import_module("<debug>", .{.buffer_size = 100});

// Colors along which we expect a wavelet
param red : color;
param blue : color;

// Variable whose value we update in our tasks
var global : i16 = 0;

// Task that will be triggered by red wavelet
task red_task(in_data : i16) void {
  // Record timestamp for beginning of task in `times`
  times.trace_timestamp();

  // Record string denoting task color in `trace`
  trace.trace_string("Start red task");

  // Update global variable
  global += in_data;

  // Record updated value of global in `trace`
  trace.trace_i16(global);

  // Record timestamp for end of task in `times`
  times.trace_timestamp();
}

// Task that will be triggered by blue wavelet
task blue_task(in_data : i16) void {
  // Record timestamp for beginning of task in `times`
  times.trace_timestamp();

  // Record string denoting task color in `trace`
  trace.trace_string("Start blue task");

  // Update global variable
  global += in_data * 2;

  // Record updated value of global in `trace`
  trace.trace_i16(global);

  // Record timestamp for end of task in `times`
  times.trace_timestamp();
}

comptime {
  // Associate the appropriate task with the wavelet's color
  @bind_task(red_task, red);
  @bind_task(blue_task, blue);
}
