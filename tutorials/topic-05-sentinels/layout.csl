// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Color map
//
//  ID var          ID var  ID var               ID var
//   0 main_color    9      18                   27 reserved (memcpy)
//   1              10      19                   28 reserved (memcpy)
//   2 MEMCPYH2D_1  11      20                   29 reserved
//   3 MEMCPYH2D_2  12      21 reserved (memcpy) 30 reserved (memcpy)
//   4 MEMCPYD2H_1  13      22 reserved (memcpy) 31 reserved
//   5              14      23 reserved (memcpy) 32
//   6              15      24                   33
//   7              16      25                   34
//   8              17      26                   35

// See task maps in sentinel.csl and pe_program.csl

//                 +--------------+                  +----------------+
//  MEMCPYH2D_1 -> | sentinel.csl | -> main_color -> | pe_program.csl | -> MEMCPYD2H_1
//  MEMCPYH2D_2 -> |              |                  +----------------+
//                 +--------------+

// IDs for memcpy streaming colors
param MEMCPYH2D_DATA_1_ID: i16;
param MEMCPYH2D_DATA_2_ID: i16;
param MEMCPYD2H_DATA_1_ID: i16;

// number of PEs in a column
param size: i16;

// Sentinel to tell PE that it is time to send the result to the host
const end_computation: u16 = 43;

// Colors
const MEMCPYH2D_DATA_1: color = @get_color(MEMCPYH2D_DATA_1_ID);
const MEMCPYH2D_DATA_2: color = @get_color(MEMCPYH2D_DATA_2_ID);
const MEMCPYD2H_DATA_1: color = @get_color(MEMCPYD2H_DATA_1_ID);

const main_color: color = @get_color(0);

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = 2,
  .height = size,
  .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
  .MEMCPYH2D_2 = MEMCPYH2D_DATA_2,
  .MEMCPYD2H_1 = MEMCPYD2H_DATA_1
});

layout {
  @set_rectangle(2, size);

  for (@range(u16, size)) |idx| {
    @set_tile_code(0, idx, "sentinel.csl", .{
      .memcpy_params = memcpy.get_params(0),
      .main_color = main_color,
      .sentinel = end_computation,
    });

    @set_color_config(0, idx, main_color,.{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST }}});

    @set_tile_code(1, idx, "pe_program.csl", .{
      .memcpy_params = memcpy.get_params(1),
      .main_color = main_color,
      .sentinel = end_computation,
    });

    @set_color_config(1, idx, main_color, .{ .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }}});
  }
}
