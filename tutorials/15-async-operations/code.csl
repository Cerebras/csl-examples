// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// resources to route the data between the host and the device.
//

// color map
//
// color  var    color  var              color  var              color  var
//   0 H2D          9                      18                      27   reserved (memcpy)
//   1 D2H         10                      19                      28   reserved (memcpy)
//   2 LAUNCH      11                      20                      29   reserved
//   3             12                      21    reserved (memcpy) 30   reserved (memcpy)
//   4 c0          13                      22    reserved (memcpy) 31   reserved
//   5 c1          14                      23    reserved (memcpy) 32
//   6 c2          15                      24                      33
//   7             16                      25                      34
//   8             17                      26                      35
//

param MEMCPYH2D_DATA_1_ID: i16;
param MEMCPYD2H_DATA_1_ID: i16;
param LAUNCH_ID: i16;

const MEMCPYH2D_DATA_1: color = @get_color(MEMCPYH2D_DATA_1_ID);
const MEMCPYD2H_DATA_1: color = @get_color(MEMCPYD2H_DATA_1_ID);
const LAUNCH: color = @get_color(LAUNCH_ID);

const color0: color = @get_color(4);
const color1: color = @get_color(5);
const color2: color = @get_color(6);

const memcpy = @import_module( "<memcpy_multi/get_params>", .{
    .width = 1,
    .height = 2
    });

layout {
  @set_rectangle(1, 2);

  const memcpy_params = memcpy.get_params(0);

  // 1st PE receives data from H2D color and forwards it
  // to color0
  @set_tile_code(0, 0, "subkernel.csl", .{
    .inDir = RAMP,
    .outDir = SOUTH,
    .inColor = color0,
    .outColor = color1,
    .last_pe = false,
    .memcpy_params = memcpy_params,
    .MEMCPYH2D_DATA_1 = MEMCPYH2D_DATA_1,
    .MEMCPYD2H_DATA_1 = MEMCPYD2H_DATA_1,
    .LAUNCH = LAUNCH
  });

  // last PE forwards the data to D2H color
  @set_tile_code(0, 1, "subkernel.csl", .{
    .inDir = NORTH,
    .outDir = EAST,
    .inColor = color1,
    .outColor = color2,
    .last_pe = true,
    .memcpy_params = memcpy_params,
    .MEMCPYH2D_DATA_1 = MEMCPYH2D_DATA_1,
    .MEMCPYD2H_DATA_1 = MEMCPYD2H_DATA_1,
    .LAUNCH = LAUNCH
  });
}
