// Copyright 2022 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Not a complete program; the top-level source file is code.csl.

param inColor: color;
param outColor: color;

param inDir;
param outDir;

param last_pe: bool;

param memcpy_params: comptime_struct;

param LAUNCH: color;
param MEMCPYH2D_DATA_1: color;
param MEMCPYD2H_DATA_1: color;

// memcpy module reserves input queue 0 and output queue 0
const sys_mod = @import_module( "<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .MEMCPYH2D_1 = MEMCPYH2D_DATA_1,
     .MEMCPYD2H_1 = MEMCPYD2H_DATA_1,
     .LAUNCH = LAUNCH
      }));


var result = @zeros([1]i16);
const resultDsd = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{1} -> result[i]
});

task thisTask(data: i16) void {
  // Pause incoming wavelets until we've sent the processed result.
  @block(inColor);

  // Do some computation on the input data.
  result[0] = data * 2;

  // Send the result in a microthread.
  const dsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = if (last_pe) MEMCPYD2H_DATA_1 else outColor,
    .output_queue = @get_output_queue(2)
  });

  @mov16(dsd, resultDsd, .{ .async = true, .unblock = thisTask });
}

comptime {
  @comptime_assert(inDir != outDir);

  const inRoute = .{ .rx = .{ inDir }, .tx = .{ RAMP } };
  @set_local_color_config(inColor, .{ .routes = inRoute });

  const outRoute = .{ .rx = .{ RAMP }, .tx = .{ outDir } };
  @set_local_color_config(outColor, .{ .routes = outRoute });

  @bind_task(thisTask, inColor);
}

var buf = @zeros([1]i16);

const mem_buf_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> buf[i] });

const fab_trans_wdsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = inColor,
    .output_queue = @get_output_queue(1)
});


task wtt_h2d(data: i16) void {

  @block(MEMCPYH2D_DATA_1);

  // forward data from H2D to inColor
  buf[0] = data;
  @mov16(fab_trans_wdsd, mem_buf_dsd, .{ .async = true, .unblock = MEMCPYH2D_DATA_1});
}

comptime {
  @bind_task(wtt_h2d, MEMCPYH2D_DATA_1);
}
